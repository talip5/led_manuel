
led_manuel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002600  08002600  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002608  08002608  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002608  08002608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08002680  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002680  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000400d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001090  00000000  00000000  000240ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  00025140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003e8  00000000  00000000  000255d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c82  00000000  00000000  000259b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053f3  00000000  00000000  0003b63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008495e  00000000  00000000  00040a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c538b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001804  00000000  00000000  000c53dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800252c 	.word	0x0800252c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800252c 	.word	0x0800252c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 f9d2 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f84a 	bl	8000674 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  led_init();
 80005e0:	f000 ffae 	bl	8001540 <led_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GPIOD->ODR ^=GPIO_ODR_ODR_12;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <main+0x58>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a10      	ldr	r2, [pc, #64]	; (800062c <main+0x58>)
 80005ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80005ee:	6153      	str	r3, [r2, #20]
	  //Led_State=GPIOD->ODR & GPIO_ODR_ODR_12;
	  Led_State=GPIOD->ODR & GPIO_ODR_ODR_12;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <main+0x58>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <main+0x5c>)
 80005fa:	6013      	str	r3, [r2, #0]

	  //Led_State=!Led_State;
	 //Led_State= HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
	 printf("HELLO WORLD %d \n",Led_State);
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <main+0x5c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	480c      	ldr	r0, [pc, #48]	; (8000634 <main+0x60>)
 8000604:	f001 f804 	bl	8001610 <iprintf>
	  HAL_Delay(500);
 8000608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060c:	f000 fa2a 	bl	8000a64 <HAL_Delay>
	  Odr=!(GPIOD->ODR);
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <main+0x58>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf0c      	ite	eq
 8000618:	2301      	moveq	r3, #1
 800061a:	2300      	movne	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <main+0x64>)
 8000622:	601a      	str	r2, [r3, #0]
	  HAL_Delay(250);
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 fa1d 	bl	8000a64 <HAL_Delay>
  {
 800062a:	e7db      	b.n	80005e4 <main+0x10>
 800062c:	40020c00 	.word	0x40020c00
 8000630:	2000008c 	.word	0x2000008c
 8000634:	08002544 	.word	0x08002544
 8000638:	20000090 	.word	0x20000090

0800063c <_write>:
  }
  /* USER CODE END 3 */
}

int _write(int file, char *ptr, int len)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	e009      	b.n	8000662 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	60ba      	str	r2, [r7, #8]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff94 	bl	8000584 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	dbf1      	blt.n	800064e <_write+0x12>
  }
  return len;
 800066a:	687b      	ldr	r3, [r7, #4]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 ffbc 	bl	8001600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a27      	ldr	r2, [pc, #156]	; (8000740 <SystemClock_Config+0xcc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <SystemClock_Config+0xd0>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006e8:	23c0      	movs	r3, #192	; 0xc0
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fabd 	bl	8000c78 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 f820 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fd1e 	bl	8001168 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000732:	f000 f809 	bl	8000748 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <HAL_MspInit+0x4c>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000792:	2007      	movs	r0, #7
 8000794:	f000 fa3c 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f918 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	e00a      	b.n	8000820 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800080a:	f3af 8000 	nop.w
 800080e:	4601      	mov	r1, r0
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60ba      	str	r2, [r7, #8]
 8000816:	b2ca      	uxtb	r2, r1
 8000818:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	dbf0      	blt.n	800080a <_read+0x12>
  }

  return len;
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085a:	605a      	str	r2, [r3, #4]
  return 0;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_isatty>:

int _isatty(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f000 fe6e 	bl	80015ac <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20020000 	.word	0x20020000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000094 	.word	0x20000094
 8000904:	200000b0 	.word	0x200000b0

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000932:	490e      	ldr	r1, [pc, #56]	; (800096c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000934:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000948:	4c0b      	ldr	r4, [pc, #44]	; (8000978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000956:	f7ff ffd7 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f000 fe2d 	bl	80015b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fe39 	bl	80005d4 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000970:	08002610 	.word	0x08002610
  ldr r2, =_sbss
 8000974:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000978:	200000ac 	.word	0x200000ac

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f931 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fece 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f93b 	bl	8000c5e <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f911 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000098 	.word	0x20000098

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000098 	.word	0x20000098

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff ffee 	bl	8000a4c <HAL_GetTick>
 8000a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a8a:	bf00      	nop
 8000a8c:	f7ff ffde 	bl	8000a4c <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008

08000aac <__NVIC_SetPriorityGrouping>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_SetPriority>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff47 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff5c 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffb0 	bl	8000bcc <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e267      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d075      	beq.n	8000d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c96:	4b88      	ldr	r3, [pc, #544]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d00c      	beq.n	8000cbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca2:	4b85      	ldr	r3, [pc, #532]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d112      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cae:	4b82      	ldr	r3, [pc, #520]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cba:	d10b      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbc:	4b7e      	ldr	r3, [pc, #504]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d05b      	beq.n	8000d80 <HAL_RCC_OscConfig+0x108>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d157      	bne.n	8000d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e242      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cdc:	d106      	bne.n	8000cec <HAL_RCC_OscConfig+0x74>
 8000cde:	4b76      	ldr	r3, [pc, #472]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a75      	ldr	r2, [pc, #468]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e01d      	b.n	8000d28 <HAL_RCC_OscConfig+0xb0>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf4:	d10c      	bne.n	8000d10 <HAL_RCC_OscConfig+0x98>
 8000cf6:	4b70      	ldr	r3, [pc, #448]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a6f      	ldr	r2, [pc, #444]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b6d      	ldr	r3, [pc, #436]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a6c      	ldr	r2, [pc, #432]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e00b      	b.n	8000d28 <HAL_RCC_OscConfig+0xb0>
 8000d10:	4b69      	ldr	r3, [pc, #420]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a68      	ldr	r2, [pc, #416]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b66      	ldr	r3, [pc, #408]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a65      	ldr	r2, [pc, #404]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d013      	beq.n	8000d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fe8c 	bl	8000a4c <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fe88 	bl	8000a4c <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	; 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e207      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4a:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f0      	beq.n	8000d38 <HAL_RCC_OscConfig+0xc0>
 8000d56:	e014      	b.n	8000d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fe78 	bl	8000a4c <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fe74 	bl	8000a4c <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b64      	cmp	r3, #100	; 0x64
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e1f3      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f0      	bne.n	8000d60 <HAL_RCC_OscConfig+0xe8>
 8000d7e:	e000      	b.n	8000d82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d063      	beq.n	8000e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00b      	beq.n	8000db2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d11c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da6:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d116      	bne.n	8000de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db2:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <HAL_RCC_OscConfig+0x152>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d001      	beq.n	8000dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e1c7      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4937      	ldr	r1, [pc, #220]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dde:	e03a      	b.n	8000e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d020      	beq.n	8000e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de8:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <HAL_RCC_OscConfig+0x244>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dee:	f7ff fe2d 	bl	8000a4c <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df6:	f7ff fe29 	bl	8000a4c <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e1a8      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4925      	ldr	r1, [pc, #148]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
 8000e28:	e015      	b.n	8000e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_RCC_OscConfig+0x244>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e30:	f7ff fe0c 	bl	8000a4c <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e38:	f7ff fe08 	bl	8000a4c <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e187      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d036      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d016      	beq.n	8000e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_RCC_OscConfig+0x248>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e70:	f7ff fdec 	bl	8000a4c <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e78:	f7ff fde8 	bl	8000a4c <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e167      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_RCC_OscConfig+0x240>)
 8000e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0x200>
 8000e96:	e01b      	b.n	8000ed0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_RCC_OscConfig+0x248>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fdd5 	bl	8000a4c <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea4:	e00e      	b.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea6:	f7ff fdd1 	bl	8000a4c <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d907      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e150      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	42470000 	.word	0x42470000
 8000ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec4:	4b88      	ldr	r3, [pc, #544]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1ea      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 8097 	beq.w	800100c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee2:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10f      	bne.n	8000f0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a7c      	ldr	r2, [pc, #496]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b7a      	ldr	r3, [pc, #488]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0e:	4b77      	ldr	r3, [pc, #476]	; (80010ec <HAL_RCC_OscConfig+0x474>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d118      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f1a:	4b74      	ldr	r3, [pc, #464]	; (80010ec <HAL_RCC_OscConfig+0x474>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a73      	ldr	r2, [pc, #460]	; (80010ec <HAL_RCC_OscConfig+0x474>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f26:	f7ff fd91 	bl	8000a4c <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2e:	f7ff fd8d 	bl	8000a4c <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e10c      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f40:	4b6a      	ldr	r3, [pc, #424]	; (80010ec <HAL_RCC_OscConfig+0x474>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x2ea>
 8000f54:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f58:	4a63      	ldr	r2, [pc, #396]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f60:	e01c      	b.n	8000f9c <HAL_RCC_OscConfig+0x324>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x30c>
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6e:	4a5e      	ldr	r2, [pc, #376]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6713      	str	r3, [r2, #112]	; 0x70
 8000f76:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7a:	4a5b      	ldr	r2, [pc, #364]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6713      	str	r3, [r2, #112]	; 0x70
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0x324>
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f90:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f94:	4a54      	ldr	r2, [pc, #336]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000f96:	f023 0304 	bic.w	r3, r3, #4
 8000f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d015      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fd52 	bl	8000a4c <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000faa:	e00a      	b.n	8000fc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fac:	f7ff fd4e 	bl	8000a4c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e0cb      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc2:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0ee      	beq.n	8000fac <HAL_RCC_OscConfig+0x334>
 8000fce:	e014      	b.n	8000ffa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd0:	f7ff fd3c 	bl	8000a4c <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd6:	e00a      	b.n	8000fee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fd38 	bl	8000a4c <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e0b5      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8000ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1ee      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a38      	ldr	r2, [pc, #224]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8001006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80a1 	beq.w	8001158 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b08      	cmp	r3, #8
 8001020:	d05c      	beq.n	80010dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d141      	bne.n	80010ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <HAL_RCC_OscConfig+0x478>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fd0c 	bl	8000a4c <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001038:	f7ff fd08 	bl	8000a4c <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e087      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69da      	ldr	r2, [r3, #28]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	019b      	lsls	r3, r3, #6
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	085b      	lsrs	r3, r3, #1
 800106e:	3b01      	subs	r3, #1
 8001070:	041b      	lsls	r3, r3, #16
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	061b      	lsls	r3, r3, #24
 800107a:	491b      	ldr	r1, [pc, #108]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_RCC_OscConfig+0x478>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fce1 	bl	8000a4c <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff fcdd 	bl	8000a4c <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e05c      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x416>
 80010ac:	e054      	b.n	8001158 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_RCC_OscConfig+0x478>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fcca 	bl	8000a4c <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010bc:	f7ff fcc6 	bl	8000a4c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e045      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_RCC_OscConfig+0x470>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x444>
 80010da:	e03d      	b.n	8001158 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d107      	bne.n	80010f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e038      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000
 80010f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_RCC_OscConfig+0x4ec>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d028      	beq.n	8001154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800110c:	429a      	cmp	r2, r3
 800110e:	d121      	bne.n	8001154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	429a      	cmp	r2, r3
 800111c:	d11a      	bne.n	8001154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001124:	4013      	ands	r3, r2
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800112a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800112c:	4293      	cmp	r3, r2
 800112e:	d111      	bne.n	8001154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	3b01      	subs	r3, #1
 800113e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001140:	429a      	cmp	r2, r3
 8001142:	d107      	bne.n	8001154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0cc      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800117c:	4b68      	ldr	r3, [pc, #416]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d90c      	bls.n	80011a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b65      	ldr	r3, [pc, #404]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0b8      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011bc:	4b59      	ldr	r3, [pc, #356]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a58      	ldr	r2, [pc, #352]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d4:	4b53      	ldr	r3, [pc, #332]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a52      	ldr	r2, [pc, #328]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e0:	4b50      	ldr	r3, [pc, #320]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	494d      	ldr	r1, [pc, #308]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d044      	beq.n	8001288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d107      	bne.n	8001216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b47      	ldr	r3, [pc, #284]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d119      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e07f      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d003      	beq.n	8001226 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001222:	2b03      	cmp	r3, #3
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001226:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d109      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e06f      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e067      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f023 0203 	bic.w	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4934      	ldr	r1, [pc, #208]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	4313      	orrs	r3, r2
 8001256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001258:	f7ff fbf8 	bl	8000a4c <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	e00a      	b.n	8001276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001260:	f7ff fbf4 	bl	8000a4c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	f241 3288 	movw	r2, #5000	; 0x1388
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e04f      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 020c 	and.w	r2, r3, #12
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	429a      	cmp	r2, r3
 8001286:	d1eb      	bne.n	8001260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d20c      	bcs.n	80012b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_RCC_ClockConfig+0x1b8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e032      	b.n	8001316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4916      	ldr	r1, [pc, #88]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	490e      	ldr	r1, [pc, #56]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ee:	f000 f821 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	490a      	ldr	r1, [pc, #40]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	5ccb      	ldrb	r3, [r1, r3]
 8001302:	fa22 f303 	lsr.w	r3, r2, r3
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_RCC_ClockConfig+0x1c8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fb58 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00
 8001324:	40023800 	.word	0x40023800
 8001328:	08002558 	.word	0x08002558
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001338:	b094      	sub	sp, #80	; 0x50
 800133a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
 8001340:	2300      	movs	r3, #0
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001344:	2300      	movs	r3, #0
 8001346:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800134c:	4b79      	ldr	r3, [pc, #484]	; (8001534 <HAL_RCC_GetSysClockFreq+0x200>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d00d      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x40>
 8001358:	2b08      	cmp	r3, #8
 800135a:	f200 80e1 	bhi.w	8001520 <HAL_RCC_GetSysClockFreq+0x1ec>
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x34>
 8001362:	2b04      	cmp	r3, #4
 8001364:	d003      	beq.n	800136e <HAL_RCC_GetSysClockFreq+0x3a>
 8001366:	e0db      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001368:	4b73      	ldr	r3, [pc, #460]	; (8001538 <HAL_RCC_GetSysClockFreq+0x204>)
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800136c:	e0db      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800136e:	4b73      	ldr	r3, [pc, #460]	; (800153c <HAL_RCC_GetSysClockFreq+0x208>)
 8001370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001372:	e0d8      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001374:	4b6f      	ldr	r3, [pc, #444]	; (8001534 <HAL_RCC_GetSysClockFreq+0x200>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800137c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800137e:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <HAL_RCC_GetSysClockFreq+0x200>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138a:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <HAL_RCC_GetSysClockFreq+0x200>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	099b      	lsrs	r3, r3, #6
 8001390:	2200      	movs	r2, #0
 8001392:	63bb      	str	r3, [r7, #56]	; 0x38
 8001394:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
 800139e:	2300      	movs	r3, #0
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
 80013a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013a6:	4622      	mov	r2, r4
 80013a8:	462b      	mov	r3, r5
 80013aa:	f04f 0000 	mov.w	r0, #0
 80013ae:	f04f 0100 	mov.w	r1, #0
 80013b2:	0159      	lsls	r1, r3, #5
 80013b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013b8:	0150      	lsls	r0, r2, #5
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4621      	mov	r1, r4
 80013c0:	1a51      	subs	r1, r2, r1
 80013c2:	6139      	str	r1, [r7, #16]
 80013c4:	4629      	mov	r1, r5
 80013c6:	eb63 0301 	sbc.w	r3, r3, r1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013d8:	4659      	mov	r1, fp
 80013da:	018b      	lsls	r3, r1, #6
 80013dc:	4651      	mov	r1, sl
 80013de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013e2:	4651      	mov	r1, sl
 80013e4:	018a      	lsls	r2, r1, #6
 80013e6:	4651      	mov	r1, sl
 80013e8:	ebb2 0801 	subs.w	r8, r2, r1
 80013ec:	4659      	mov	r1, fp
 80013ee:	eb63 0901 	sbc.w	r9, r3, r1
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001406:	4690      	mov	r8, r2
 8001408:	4699      	mov	r9, r3
 800140a:	4623      	mov	r3, r4
 800140c:	eb18 0303 	adds.w	r3, r8, r3
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	462b      	mov	r3, r5
 8001414:	eb49 0303 	adc.w	r3, r9, r3
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001426:	4629      	mov	r1, r5
 8001428:	024b      	lsls	r3, r1, #9
 800142a:	4621      	mov	r1, r4
 800142c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001430:	4621      	mov	r1, r4
 8001432:	024a      	lsls	r2, r1, #9
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143a:	2200      	movs	r2, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
 800143e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001444:	f7fe ff1c 	bl	8000280 <__aeabi_uldivmod>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4613      	mov	r3, r2
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001450:	e058      	b.n	8001504 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_RCC_GetSysClockFreq+0x200>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	099b      	lsrs	r3, r3, #6
 8001458:	2200      	movs	r2, #0
 800145a:	4618      	mov	r0, r3
 800145c:	4611      	mov	r1, r2
 800145e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001462:	623b      	str	r3, [r7, #32]
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
 8001468:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800146c:	4642      	mov	r2, r8
 800146e:	464b      	mov	r3, r9
 8001470:	f04f 0000 	mov.w	r0, #0
 8001474:	f04f 0100 	mov.w	r1, #0
 8001478:	0159      	lsls	r1, r3, #5
 800147a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800147e:	0150      	lsls	r0, r2, #5
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4641      	mov	r1, r8
 8001486:	ebb2 0a01 	subs.w	sl, r2, r1
 800148a:	4649      	mov	r1, r9
 800148c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800149c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014a4:	ebb2 040a 	subs.w	r4, r2, sl
 80014a8:	eb63 050b 	sbc.w	r5, r3, fp
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	00eb      	lsls	r3, r5, #3
 80014b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014ba:	00e2      	lsls	r2, r4, #3
 80014bc:	4614      	mov	r4, r2
 80014be:	461d      	mov	r5, r3
 80014c0:	4643      	mov	r3, r8
 80014c2:	18e3      	adds	r3, r4, r3
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	464b      	mov	r3, r9
 80014c8:	eb45 0303 	adc.w	r3, r5, r3
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014da:	4629      	mov	r1, r5
 80014dc:	028b      	lsls	r3, r1, #10
 80014de:	4621      	mov	r1, r4
 80014e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014e4:	4621      	mov	r1, r4
 80014e6:	028a      	lsls	r2, r1, #10
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ee:	2200      	movs	r2, #0
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	61fa      	str	r2, [r7, #28]
 80014f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014f8:	f7fe fec2 	bl	8000280 <__aeabi_uldivmod>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4613      	mov	r3, r2
 8001502:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_GetSysClockFreq+0x200>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	3301      	adds	r3, #1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800151e:	e002      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_GetSysClockFreq+0x204>)
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001528:	4618      	mov	r0, r3
 800152a:	3750      	adds	r7, #80	; 0x50
 800152c:	46bd      	mov	sp, r7
 800152e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	00f42400 	.word	0x00f42400
 800153c:	007a1200 	.word	0x007a1200

08001540 <led_init>:
 *  Created on: May 1, 2023
 *      Author: ataha
 */
#include "stm32f4xx_hal.h"

void led_init(void){
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	  RCC->AHB1ENR |=(1<<3);
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <led_init+0x64>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <led_init+0x64>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6313      	str	r3, [r2, #48]	; 0x30

	  GPIOD->MODER |=(1<<24);
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <led_init+0x68>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <led_init+0x68>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	6013      	str	r3, [r2, #0]
	  GPIOD->MODER &=~(1<<25);
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <led_init+0x68>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <led_init+0x68>)
 8001562:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001566:	6013      	str	r3, [r2, #0]
	  GPIOD->OTYPER &=~(1<<12);
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <led_init+0x68>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <led_init+0x68>)
 800156e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001572:	6053      	str	r3, [r2, #4]
	  GPIOD->OSPEEDR |=(1<<24);
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <led_init+0x68>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <led_init+0x68>)
 800157a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157e:	6093      	str	r3, [r2, #8]
	  GPIOD->OSPEEDR &=~(1<<25);
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <led_init+0x68>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <led_init+0x68>)
 8001586:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800158a:	6093      	str	r3, [r2, #8]
	  GPIOD->PUPDR &=~((1<<24)|(1<<25));
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <led_init+0x68>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <led_init+0x68>)
 8001592:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020c00 	.word	0x40020c00

080015ac <__errno>:
 80015ac:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <__errno+0x8>)
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	2000000c 	.word	0x2000000c

080015b8 <__libc_init_array>:
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	4d0d      	ldr	r5, [pc, #52]	; (80015f0 <__libc_init_array+0x38>)
 80015bc:	4c0d      	ldr	r4, [pc, #52]	; (80015f4 <__libc_init_array+0x3c>)
 80015be:	1b64      	subs	r4, r4, r5
 80015c0:	10a4      	asrs	r4, r4, #2
 80015c2:	2600      	movs	r6, #0
 80015c4:	42a6      	cmp	r6, r4
 80015c6:	d109      	bne.n	80015dc <__libc_init_array+0x24>
 80015c8:	4d0b      	ldr	r5, [pc, #44]	; (80015f8 <__libc_init_array+0x40>)
 80015ca:	4c0c      	ldr	r4, [pc, #48]	; (80015fc <__libc_init_array+0x44>)
 80015cc:	f000 ffae 	bl	800252c <_init>
 80015d0:	1b64      	subs	r4, r4, r5
 80015d2:	10a4      	asrs	r4, r4, #2
 80015d4:	2600      	movs	r6, #0
 80015d6:	42a6      	cmp	r6, r4
 80015d8:	d105      	bne.n	80015e6 <__libc_init_array+0x2e>
 80015da:	bd70      	pop	{r4, r5, r6, pc}
 80015dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e0:	4798      	blx	r3
 80015e2:	3601      	adds	r6, #1
 80015e4:	e7ee      	b.n	80015c4 <__libc_init_array+0xc>
 80015e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ea:	4798      	blx	r3
 80015ec:	3601      	adds	r6, #1
 80015ee:	e7f2      	b.n	80015d6 <__libc_init_array+0x1e>
 80015f0:	08002608 	.word	0x08002608
 80015f4:	08002608 	.word	0x08002608
 80015f8:	08002608 	.word	0x08002608
 80015fc:	0800260c 	.word	0x0800260c

08001600 <memset>:
 8001600:	4402      	add	r2, r0
 8001602:	4603      	mov	r3, r0
 8001604:	4293      	cmp	r3, r2
 8001606:	d100      	bne.n	800160a <memset+0xa>
 8001608:	4770      	bx	lr
 800160a:	f803 1b01 	strb.w	r1, [r3], #1
 800160e:	e7f9      	b.n	8001604 <memset+0x4>

08001610 <iprintf>:
 8001610:	b40f      	push	{r0, r1, r2, r3}
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <iprintf+0x2c>)
 8001614:	b513      	push	{r0, r1, r4, lr}
 8001616:	681c      	ldr	r4, [r3, #0]
 8001618:	b124      	cbz	r4, 8001624 <iprintf+0x14>
 800161a:	69a3      	ldr	r3, [r4, #24]
 800161c:	b913      	cbnz	r3, 8001624 <iprintf+0x14>
 800161e:	4620      	mov	r0, r4
 8001620:	f000 f866 	bl	80016f0 <__sinit>
 8001624:	ab05      	add	r3, sp, #20
 8001626:	9a04      	ldr	r2, [sp, #16]
 8001628:	68a1      	ldr	r1, [r4, #8]
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	4620      	mov	r0, r4
 800162e:	f000 f9bd 	bl	80019ac <_vfiprintf_r>
 8001632:	b002      	add	sp, #8
 8001634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001638:	b004      	add	sp, #16
 800163a:	4770      	bx	lr
 800163c:	2000000c 	.word	0x2000000c

08001640 <std>:
 8001640:	2300      	movs	r3, #0
 8001642:	b510      	push	{r4, lr}
 8001644:	4604      	mov	r4, r0
 8001646:	e9c0 3300 	strd	r3, r3, [r0]
 800164a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800164e:	6083      	str	r3, [r0, #8]
 8001650:	8181      	strh	r1, [r0, #12]
 8001652:	6643      	str	r3, [r0, #100]	; 0x64
 8001654:	81c2      	strh	r2, [r0, #14]
 8001656:	6183      	str	r3, [r0, #24]
 8001658:	4619      	mov	r1, r3
 800165a:	2208      	movs	r2, #8
 800165c:	305c      	adds	r0, #92	; 0x5c
 800165e:	f7ff ffcf 	bl	8001600 <memset>
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <std+0x38>)
 8001664:	6263      	str	r3, [r4, #36]	; 0x24
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <std+0x3c>)
 8001668:	62a3      	str	r3, [r4, #40]	; 0x28
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <std+0x40>)
 800166c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <std+0x44>)
 8001670:	6224      	str	r4, [r4, #32]
 8001672:	6323      	str	r3, [r4, #48]	; 0x30
 8001674:	bd10      	pop	{r4, pc}
 8001676:	bf00      	nop
 8001678:	08001f55 	.word	0x08001f55
 800167c:	08001f77 	.word	0x08001f77
 8001680:	08001faf 	.word	0x08001faf
 8001684:	08001fd3 	.word	0x08001fd3

08001688 <_cleanup_r>:
 8001688:	4901      	ldr	r1, [pc, #4]	; (8001690 <_cleanup_r+0x8>)
 800168a:	f000 b8af 	b.w	80017ec <_fwalk_reent>
 800168e:	bf00      	nop
 8001690:	080022ad 	.word	0x080022ad

08001694 <__sfmoreglue>:
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	2268      	movs	r2, #104	; 0x68
 8001698:	1e4d      	subs	r5, r1, #1
 800169a:	4355      	muls	r5, r2
 800169c:	460e      	mov	r6, r1
 800169e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80016a2:	f000 f8e5 	bl	8001870 <_malloc_r>
 80016a6:	4604      	mov	r4, r0
 80016a8:	b140      	cbz	r0, 80016bc <__sfmoreglue+0x28>
 80016aa:	2100      	movs	r1, #0
 80016ac:	e9c0 1600 	strd	r1, r6, [r0]
 80016b0:	300c      	adds	r0, #12
 80016b2:	60a0      	str	r0, [r4, #8]
 80016b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016b8:	f7ff ffa2 	bl	8001600 <memset>
 80016bc:	4620      	mov	r0, r4
 80016be:	bd70      	pop	{r4, r5, r6, pc}

080016c0 <__sfp_lock_acquire>:
 80016c0:	4801      	ldr	r0, [pc, #4]	; (80016c8 <__sfp_lock_acquire+0x8>)
 80016c2:	f000 b8b3 	b.w	800182c <__retarget_lock_acquire_recursive>
 80016c6:	bf00      	nop
 80016c8:	2000009d 	.word	0x2000009d

080016cc <__sfp_lock_release>:
 80016cc:	4801      	ldr	r0, [pc, #4]	; (80016d4 <__sfp_lock_release+0x8>)
 80016ce:	f000 b8ae 	b.w	800182e <__retarget_lock_release_recursive>
 80016d2:	bf00      	nop
 80016d4:	2000009d 	.word	0x2000009d

080016d8 <__sinit_lock_acquire>:
 80016d8:	4801      	ldr	r0, [pc, #4]	; (80016e0 <__sinit_lock_acquire+0x8>)
 80016da:	f000 b8a7 	b.w	800182c <__retarget_lock_acquire_recursive>
 80016de:	bf00      	nop
 80016e0:	2000009e 	.word	0x2000009e

080016e4 <__sinit_lock_release>:
 80016e4:	4801      	ldr	r0, [pc, #4]	; (80016ec <__sinit_lock_release+0x8>)
 80016e6:	f000 b8a2 	b.w	800182e <__retarget_lock_release_recursive>
 80016ea:	bf00      	nop
 80016ec:	2000009e 	.word	0x2000009e

080016f0 <__sinit>:
 80016f0:	b510      	push	{r4, lr}
 80016f2:	4604      	mov	r4, r0
 80016f4:	f7ff fff0 	bl	80016d8 <__sinit_lock_acquire>
 80016f8:	69a3      	ldr	r3, [r4, #24]
 80016fa:	b11b      	cbz	r3, 8001704 <__sinit+0x14>
 80016fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001700:	f7ff bff0 	b.w	80016e4 <__sinit_lock_release>
 8001704:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001708:	6523      	str	r3, [r4, #80]	; 0x50
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <__sinit+0x68>)
 800170c:	4a13      	ldr	r2, [pc, #76]	; (800175c <__sinit+0x6c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	62a2      	str	r2, [r4, #40]	; 0x28
 8001712:	42a3      	cmp	r3, r4
 8001714:	bf04      	itt	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	61a3      	streq	r3, [r4, #24]
 800171a:	4620      	mov	r0, r4
 800171c:	f000 f820 	bl	8001760 <__sfp>
 8001720:	6060      	str	r0, [r4, #4]
 8001722:	4620      	mov	r0, r4
 8001724:	f000 f81c 	bl	8001760 <__sfp>
 8001728:	60a0      	str	r0, [r4, #8]
 800172a:	4620      	mov	r0, r4
 800172c:	f000 f818 	bl	8001760 <__sfp>
 8001730:	2200      	movs	r2, #0
 8001732:	60e0      	str	r0, [r4, #12]
 8001734:	2104      	movs	r1, #4
 8001736:	6860      	ldr	r0, [r4, #4]
 8001738:	f7ff ff82 	bl	8001640 <std>
 800173c:	68a0      	ldr	r0, [r4, #8]
 800173e:	2201      	movs	r2, #1
 8001740:	2109      	movs	r1, #9
 8001742:	f7ff ff7d 	bl	8001640 <std>
 8001746:	68e0      	ldr	r0, [r4, #12]
 8001748:	2202      	movs	r2, #2
 800174a:	2112      	movs	r1, #18
 800174c:	f7ff ff78 	bl	8001640 <std>
 8001750:	2301      	movs	r3, #1
 8001752:	61a3      	str	r3, [r4, #24]
 8001754:	e7d2      	b.n	80016fc <__sinit+0xc>
 8001756:	bf00      	nop
 8001758:	08002568 	.word	0x08002568
 800175c:	08001689 	.word	0x08001689

08001760 <__sfp>:
 8001760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001762:	4607      	mov	r7, r0
 8001764:	f7ff ffac 	bl	80016c0 <__sfp_lock_acquire>
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <__sfp+0x84>)
 800176a:	681e      	ldr	r6, [r3, #0]
 800176c:	69b3      	ldr	r3, [r6, #24]
 800176e:	b913      	cbnz	r3, 8001776 <__sfp+0x16>
 8001770:	4630      	mov	r0, r6
 8001772:	f7ff ffbd 	bl	80016f0 <__sinit>
 8001776:	3648      	adds	r6, #72	; 0x48
 8001778:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800177c:	3b01      	subs	r3, #1
 800177e:	d503      	bpl.n	8001788 <__sfp+0x28>
 8001780:	6833      	ldr	r3, [r6, #0]
 8001782:	b30b      	cbz	r3, 80017c8 <__sfp+0x68>
 8001784:	6836      	ldr	r6, [r6, #0]
 8001786:	e7f7      	b.n	8001778 <__sfp+0x18>
 8001788:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800178c:	b9d5      	cbnz	r5, 80017c4 <__sfp+0x64>
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <__sfp+0x88>)
 8001790:	60e3      	str	r3, [r4, #12]
 8001792:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001796:	6665      	str	r5, [r4, #100]	; 0x64
 8001798:	f000 f847 	bl	800182a <__retarget_lock_init_recursive>
 800179c:	f7ff ff96 	bl	80016cc <__sfp_lock_release>
 80017a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80017a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80017a8:	6025      	str	r5, [r4, #0]
 80017aa:	61a5      	str	r5, [r4, #24]
 80017ac:	2208      	movs	r2, #8
 80017ae:	4629      	mov	r1, r5
 80017b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80017b4:	f7ff ff24 	bl	8001600 <memset>
 80017b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80017bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80017c0:	4620      	mov	r0, r4
 80017c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017c4:	3468      	adds	r4, #104	; 0x68
 80017c6:	e7d9      	b.n	800177c <__sfp+0x1c>
 80017c8:	2104      	movs	r1, #4
 80017ca:	4638      	mov	r0, r7
 80017cc:	f7ff ff62 	bl	8001694 <__sfmoreglue>
 80017d0:	4604      	mov	r4, r0
 80017d2:	6030      	str	r0, [r6, #0]
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d1d5      	bne.n	8001784 <__sfp+0x24>
 80017d8:	f7ff ff78 	bl	80016cc <__sfp_lock_release>
 80017dc:	230c      	movs	r3, #12
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	e7ee      	b.n	80017c0 <__sfp+0x60>
 80017e2:	bf00      	nop
 80017e4:	08002568 	.word	0x08002568
 80017e8:	ffff0001 	.word	0xffff0001

080017ec <_fwalk_reent>:
 80017ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017f0:	4606      	mov	r6, r0
 80017f2:	4688      	mov	r8, r1
 80017f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80017f8:	2700      	movs	r7, #0
 80017fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017fe:	f1b9 0901 	subs.w	r9, r9, #1
 8001802:	d505      	bpl.n	8001810 <_fwalk_reent+0x24>
 8001804:	6824      	ldr	r4, [r4, #0]
 8001806:	2c00      	cmp	r4, #0
 8001808:	d1f7      	bne.n	80017fa <_fwalk_reent+0xe>
 800180a:	4638      	mov	r0, r7
 800180c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001810:	89ab      	ldrh	r3, [r5, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d907      	bls.n	8001826 <_fwalk_reent+0x3a>
 8001816:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800181a:	3301      	adds	r3, #1
 800181c:	d003      	beq.n	8001826 <_fwalk_reent+0x3a>
 800181e:	4629      	mov	r1, r5
 8001820:	4630      	mov	r0, r6
 8001822:	47c0      	blx	r8
 8001824:	4307      	orrs	r7, r0
 8001826:	3568      	adds	r5, #104	; 0x68
 8001828:	e7e9      	b.n	80017fe <_fwalk_reent+0x12>

0800182a <__retarget_lock_init_recursive>:
 800182a:	4770      	bx	lr

0800182c <__retarget_lock_acquire_recursive>:
 800182c:	4770      	bx	lr

0800182e <__retarget_lock_release_recursive>:
 800182e:	4770      	bx	lr

08001830 <sbrk_aligned>:
 8001830:	b570      	push	{r4, r5, r6, lr}
 8001832:	4e0e      	ldr	r6, [pc, #56]	; (800186c <sbrk_aligned+0x3c>)
 8001834:	460c      	mov	r4, r1
 8001836:	6831      	ldr	r1, [r6, #0]
 8001838:	4605      	mov	r5, r0
 800183a:	b911      	cbnz	r1, 8001842 <sbrk_aligned+0x12>
 800183c:	f000 fb7a 	bl	8001f34 <_sbrk_r>
 8001840:	6030      	str	r0, [r6, #0]
 8001842:	4621      	mov	r1, r4
 8001844:	4628      	mov	r0, r5
 8001846:	f000 fb75 	bl	8001f34 <_sbrk_r>
 800184a:	1c43      	adds	r3, r0, #1
 800184c:	d00a      	beq.n	8001864 <sbrk_aligned+0x34>
 800184e:	1cc4      	adds	r4, r0, #3
 8001850:	f024 0403 	bic.w	r4, r4, #3
 8001854:	42a0      	cmp	r0, r4
 8001856:	d007      	beq.n	8001868 <sbrk_aligned+0x38>
 8001858:	1a21      	subs	r1, r4, r0
 800185a:	4628      	mov	r0, r5
 800185c:	f000 fb6a 	bl	8001f34 <_sbrk_r>
 8001860:	3001      	adds	r0, #1
 8001862:	d101      	bne.n	8001868 <sbrk_aligned+0x38>
 8001864:	f04f 34ff 	mov.w	r4, #4294967295
 8001868:	4620      	mov	r0, r4
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	200000a4 	.word	0x200000a4

08001870 <_malloc_r>:
 8001870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001874:	1ccd      	adds	r5, r1, #3
 8001876:	f025 0503 	bic.w	r5, r5, #3
 800187a:	3508      	adds	r5, #8
 800187c:	2d0c      	cmp	r5, #12
 800187e:	bf38      	it	cc
 8001880:	250c      	movcc	r5, #12
 8001882:	2d00      	cmp	r5, #0
 8001884:	4607      	mov	r7, r0
 8001886:	db01      	blt.n	800188c <_malloc_r+0x1c>
 8001888:	42a9      	cmp	r1, r5
 800188a:	d905      	bls.n	8001898 <_malloc_r+0x28>
 800188c:	230c      	movs	r3, #12
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	2600      	movs	r6, #0
 8001892:	4630      	mov	r0, r6
 8001894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001898:	4e2e      	ldr	r6, [pc, #184]	; (8001954 <_malloc_r+0xe4>)
 800189a:	f000 fdbb 	bl	8002414 <__malloc_lock>
 800189e:	6833      	ldr	r3, [r6, #0]
 80018a0:	461c      	mov	r4, r3
 80018a2:	bb34      	cbnz	r4, 80018f2 <_malloc_r+0x82>
 80018a4:	4629      	mov	r1, r5
 80018a6:	4638      	mov	r0, r7
 80018a8:	f7ff ffc2 	bl	8001830 <sbrk_aligned>
 80018ac:	1c43      	adds	r3, r0, #1
 80018ae:	4604      	mov	r4, r0
 80018b0:	d14d      	bne.n	800194e <_malloc_r+0xde>
 80018b2:	6834      	ldr	r4, [r6, #0]
 80018b4:	4626      	mov	r6, r4
 80018b6:	2e00      	cmp	r6, #0
 80018b8:	d140      	bne.n	800193c <_malloc_r+0xcc>
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	4631      	mov	r1, r6
 80018be:	4638      	mov	r0, r7
 80018c0:	eb04 0803 	add.w	r8, r4, r3
 80018c4:	f000 fb36 	bl	8001f34 <_sbrk_r>
 80018c8:	4580      	cmp	r8, r0
 80018ca:	d13a      	bne.n	8001942 <_malloc_r+0xd2>
 80018cc:	6821      	ldr	r1, [r4, #0]
 80018ce:	3503      	adds	r5, #3
 80018d0:	1a6d      	subs	r5, r5, r1
 80018d2:	f025 0503 	bic.w	r5, r5, #3
 80018d6:	3508      	adds	r5, #8
 80018d8:	2d0c      	cmp	r5, #12
 80018da:	bf38      	it	cc
 80018dc:	250c      	movcc	r5, #12
 80018de:	4629      	mov	r1, r5
 80018e0:	4638      	mov	r0, r7
 80018e2:	f7ff ffa5 	bl	8001830 <sbrk_aligned>
 80018e6:	3001      	adds	r0, #1
 80018e8:	d02b      	beq.n	8001942 <_malloc_r+0xd2>
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	442b      	add	r3, r5
 80018ee:	6023      	str	r3, [r4, #0]
 80018f0:	e00e      	b.n	8001910 <_malloc_r+0xa0>
 80018f2:	6822      	ldr	r2, [r4, #0]
 80018f4:	1b52      	subs	r2, r2, r5
 80018f6:	d41e      	bmi.n	8001936 <_malloc_r+0xc6>
 80018f8:	2a0b      	cmp	r2, #11
 80018fa:	d916      	bls.n	800192a <_malloc_r+0xba>
 80018fc:	1961      	adds	r1, r4, r5
 80018fe:	42a3      	cmp	r3, r4
 8001900:	6025      	str	r5, [r4, #0]
 8001902:	bf18      	it	ne
 8001904:	6059      	strne	r1, [r3, #4]
 8001906:	6863      	ldr	r3, [r4, #4]
 8001908:	bf08      	it	eq
 800190a:	6031      	streq	r1, [r6, #0]
 800190c:	5162      	str	r2, [r4, r5]
 800190e:	604b      	str	r3, [r1, #4]
 8001910:	4638      	mov	r0, r7
 8001912:	f104 060b 	add.w	r6, r4, #11
 8001916:	f000 fd83 	bl	8002420 <__malloc_unlock>
 800191a:	f026 0607 	bic.w	r6, r6, #7
 800191e:	1d23      	adds	r3, r4, #4
 8001920:	1af2      	subs	r2, r6, r3
 8001922:	d0b6      	beq.n	8001892 <_malloc_r+0x22>
 8001924:	1b9b      	subs	r3, r3, r6
 8001926:	50a3      	str	r3, [r4, r2]
 8001928:	e7b3      	b.n	8001892 <_malloc_r+0x22>
 800192a:	6862      	ldr	r2, [r4, #4]
 800192c:	42a3      	cmp	r3, r4
 800192e:	bf0c      	ite	eq
 8001930:	6032      	streq	r2, [r6, #0]
 8001932:	605a      	strne	r2, [r3, #4]
 8001934:	e7ec      	b.n	8001910 <_malloc_r+0xa0>
 8001936:	4623      	mov	r3, r4
 8001938:	6864      	ldr	r4, [r4, #4]
 800193a:	e7b2      	b.n	80018a2 <_malloc_r+0x32>
 800193c:	4634      	mov	r4, r6
 800193e:	6876      	ldr	r6, [r6, #4]
 8001940:	e7b9      	b.n	80018b6 <_malloc_r+0x46>
 8001942:	230c      	movs	r3, #12
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4638      	mov	r0, r7
 8001948:	f000 fd6a 	bl	8002420 <__malloc_unlock>
 800194c:	e7a1      	b.n	8001892 <_malloc_r+0x22>
 800194e:	6025      	str	r5, [r4, #0]
 8001950:	e7de      	b.n	8001910 <_malloc_r+0xa0>
 8001952:	bf00      	nop
 8001954:	200000a0 	.word	0x200000a0

08001958 <__sfputc_r>:
 8001958:	6893      	ldr	r3, [r2, #8]
 800195a:	3b01      	subs	r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	b410      	push	{r4}
 8001960:	6093      	str	r3, [r2, #8]
 8001962:	da08      	bge.n	8001976 <__sfputc_r+0x1e>
 8001964:	6994      	ldr	r4, [r2, #24]
 8001966:	42a3      	cmp	r3, r4
 8001968:	db01      	blt.n	800196e <__sfputc_r+0x16>
 800196a:	290a      	cmp	r1, #10
 800196c:	d103      	bne.n	8001976 <__sfputc_r+0x1e>
 800196e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001972:	f000 bb33 	b.w	8001fdc <__swbuf_r>
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	1c58      	adds	r0, r3, #1
 800197a:	6010      	str	r0, [r2, #0]
 800197c:	7019      	strb	r1, [r3, #0]
 800197e:	4608      	mov	r0, r1
 8001980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001984:	4770      	bx	lr

08001986 <__sfputs_r>:
 8001986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001988:	4606      	mov	r6, r0
 800198a:	460f      	mov	r7, r1
 800198c:	4614      	mov	r4, r2
 800198e:	18d5      	adds	r5, r2, r3
 8001990:	42ac      	cmp	r4, r5
 8001992:	d101      	bne.n	8001998 <__sfputs_r+0x12>
 8001994:	2000      	movs	r0, #0
 8001996:	e007      	b.n	80019a8 <__sfputs_r+0x22>
 8001998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800199c:	463a      	mov	r2, r7
 800199e:	4630      	mov	r0, r6
 80019a0:	f7ff ffda 	bl	8001958 <__sfputc_r>
 80019a4:	1c43      	adds	r3, r0, #1
 80019a6:	d1f3      	bne.n	8001990 <__sfputs_r+0xa>
 80019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080019ac <_vfiprintf_r>:
 80019ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b0:	460d      	mov	r5, r1
 80019b2:	b09d      	sub	sp, #116	; 0x74
 80019b4:	4614      	mov	r4, r2
 80019b6:	4698      	mov	r8, r3
 80019b8:	4606      	mov	r6, r0
 80019ba:	b118      	cbz	r0, 80019c4 <_vfiprintf_r+0x18>
 80019bc:	6983      	ldr	r3, [r0, #24]
 80019be:	b90b      	cbnz	r3, 80019c4 <_vfiprintf_r+0x18>
 80019c0:	f7ff fe96 	bl	80016f0 <__sinit>
 80019c4:	4b89      	ldr	r3, [pc, #548]	; (8001bec <_vfiprintf_r+0x240>)
 80019c6:	429d      	cmp	r5, r3
 80019c8:	d11b      	bne.n	8001a02 <_vfiprintf_r+0x56>
 80019ca:	6875      	ldr	r5, [r6, #4]
 80019cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019ce:	07d9      	lsls	r1, r3, #31
 80019d0:	d405      	bmi.n	80019de <_vfiprintf_r+0x32>
 80019d2:	89ab      	ldrh	r3, [r5, #12]
 80019d4:	059a      	lsls	r2, r3, #22
 80019d6:	d402      	bmi.n	80019de <_vfiprintf_r+0x32>
 80019d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019da:	f7ff ff27 	bl	800182c <__retarget_lock_acquire_recursive>
 80019de:	89ab      	ldrh	r3, [r5, #12]
 80019e0:	071b      	lsls	r3, r3, #28
 80019e2:	d501      	bpl.n	80019e8 <_vfiprintf_r+0x3c>
 80019e4:	692b      	ldr	r3, [r5, #16]
 80019e6:	b9eb      	cbnz	r3, 8001a24 <_vfiprintf_r+0x78>
 80019e8:	4629      	mov	r1, r5
 80019ea:	4630      	mov	r0, r6
 80019ec:	f000 fb5a 	bl	80020a4 <__swsetup_r>
 80019f0:	b1c0      	cbz	r0, 8001a24 <_vfiprintf_r+0x78>
 80019f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019f4:	07dc      	lsls	r4, r3, #31
 80019f6:	d50e      	bpl.n	8001a16 <_vfiprintf_r+0x6a>
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	b01d      	add	sp, #116	; 0x74
 80019fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a02:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <_vfiprintf_r+0x244>)
 8001a04:	429d      	cmp	r5, r3
 8001a06:	d101      	bne.n	8001a0c <_vfiprintf_r+0x60>
 8001a08:	68b5      	ldr	r5, [r6, #8]
 8001a0a:	e7df      	b.n	80019cc <_vfiprintf_r+0x20>
 8001a0c:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <_vfiprintf_r+0x248>)
 8001a0e:	429d      	cmp	r5, r3
 8001a10:	bf08      	it	eq
 8001a12:	68f5      	ldreq	r5, [r6, #12]
 8001a14:	e7da      	b.n	80019cc <_vfiprintf_r+0x20>
 8001a16:	89ab      	ldrh	r3, [r5, #12]
 8001a18:	0598      	lsls	r0, r3, #22
 8001a1a:	d4ed      	bmi.n	80019f8 <_vfiprintf_r+0x4c>
 8001a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a1e:	f7ff ff06 	bl	800182e <__retarget_lock_release_recursive>
 8001a22:	e7e9      	b.n	80019f8 <_vfiprintf_r+0x4c>
 8001a24:	2300      	movs	r3, #0
 8001a26:	9309      	str	r3, [sp, #36]	; 0x24
 8001a28:	2320      	movs	r3, #32
 8001a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a32:	2330      	movs	r3, #48	; 0x30
 8001a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001bf8 <_vfiprintf_r+0x24c>
 8001a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a3c:	f04f 0901 	mov.w	r9, #1
 8001a40:	4623      	mov	r3, r4
 8001a42:	469a      	mov	sl, r3
 8001a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a48:	b10a      	cbz	r2, 8001a4e <_vfiprintf_r+0xa2>
 8001a4a:	2a25      	cmp	r2, #37	; 0x25
 8001a4c:	d1f9      	bne.n	8001a42 <_vfiprintf_r+0x96>
 8001a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8001a52:	d00b      	beq.n	8001a6c <_vfiprintf_r+0xc0>
 8001a54:	465b      	mov	r3, fp
 8001a56:	4622      	mov	r2, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f7ff ff93 	bl	8001986 <__sfputs_r>
 8001a60:	3001      	adds	r0, #1
 8001a62:	f000 80aa 	beq.w	8001bba <_vfiprintf_r+0x20e>
 8001a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a68:	445a      	add	r2, fp
 8001a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8001a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a2 	beq.w	8001bba <_vfiprintf_r+0x20e>
 8001a76:	2300      	movs	r3, #0
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a80:	f10a 0a01 	add.w	sl, sl, #1
 8001a84:	9304      	str	r3, [sp, #16]
 8001a86:	9307      	str	r3, [sp, #28]
 8001a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8001a8e:	4654      	mov	r4, sl
 8001a90:	2205      	movs	r2, #5
 8001a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a96:	4858      	ldr	r0, [pc, #352]	; (8001bf8 <_vfiprintf_r+0x24c>)
 8001a98:	f7fe fba2 	bl	80001e0 <memchr>
 8001a9c:	9a04      	ldr	r2, [sp, #16]
 8001a9e:	b9d8      	cbnz	r0, 8001ad8 <_vfiprintf_r+0x12c>
 8001aa0:	06d1      	lsls	r1, r2, #27
 8001aa2:	bf44      	itt	mi
 8001aa4:	2320      	movmi	r3, #32
 8001aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001aaa:	0713      	lsls	r3, r2, #28
 8001aac:	bf44      	itt	mi
 8001aae:	232b      	movmi	r3, #43	; 0x2b
 8001ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8001ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8001aba:	d015      	beq.n	8001ae8 <_vfiprintf_r+0x13c>
 8001abc:	9a07      	ldr	r2, [sp, #28]
 8001abe:	4654      	mov	r4, sl
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f04f 0c0a 	mov.w	ip, #10
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001acc:	3b30      	subs	r3, #48	; 0x30
 8001ace:	2b09      	cmp	r3, #9
 8001ad0:	d94e      	bls.n	8001b70 <_vfiprintf_r+0x1c4>
 8001ad2:	b1b0      	cbz	r0, 8001b02 <_vfiprintf_r+0x156>
 8001ad4:	9207      	str	r2, [sp, #28]
 8001ad6:	e014      	b.n	8001b02 <_vfiprintf_r+0x156>
 8001ad8:	eba0 0308 	sub.w	r3, r0, r8
 8001adc:	fa09 f303 	lsl.w	r3, r9, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	9304      	str	r3, [sp, #16]
 8001ae4:	46a2      	mov	sl, r4
 8001ae6:	e7d2      	b.n	8001a8e <_vfiprintf_r+0xe2>
 8001ae8:	9b03      	ldr	r3, [sp, #12]
 8001aea:	1d19      	adds	r1, r3, #4
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	9103      	str	r1, [sp, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bfbb      	ittet	lt
 8001af4:	425b      	neglt	r3, r3
 8001af6:	f042 0202 	orrlt.w	r2, r2, #2
 8001afa:	9307      	strge	r3, [sp, #28]
 8001afc:	9307      	strlt	r3, [sp, #28]
 8001afe:	bfb8      	it	lt
 8001b00:	9204      	strlt	r2, [sp, #16]
 8001b02:	7823      	ldrb	r3, [r4, #0]
 8001b04:	2b2e      	cmp	r3, #46	; 0x2e
 8001b06:	d10c      	bne.n	8001b22 <_vfiprintf_r+0x176>
 8001b08:	7863      	ldrb	r3, [r4, #1]
 8001b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8001b0c:	d135      	bne.n	8001b7a <_vfiprintf_r+0x1ce>
 8001b0e:	9b03      	ldr	r3, [sp, #12]
 8001b10:	1d1a      	adds	r2, r3, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	9203      	str	r2, [sp, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bfb8      	it	lt
 8001b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b1e:	3402      	adds	r4, #2
 8001b20:	9305      	str	r3, [sp, #20]
 8001b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001c08 <_vfiprintf_r+0x25c>
 8001b26:	7821      	ldrb	r1, [r4, #0]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4650      	mov	r0, sl
 8001b2c:	f7fe fb58 	bl	80001e0 <memchr>
 8001b30:	b140      	cbz	r0, 8001b44 <_vfiprintf_r+0x198>
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	eba0 000a 	sub.w	r0, r0, sl
 8001b38:	fa03 f000 	lsl.w	r0, r3, r0
 8001b3c:	9b04      	ldr	r3, [sp, #16]
 8001b3e:	4303      	orrs	r3, r0
 8001b40:	3401      	adds	r4, #1
 8001b42:	9304      	str	r3, [sp, #16]
 8001b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b48:	482c      	ldr	r0, [pc, #176]	; (8001bfc <_vfiprintf_r+0x250>)
 8001b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b4e:	2206      	movs	r2, #6
 8001b50:	f7fe fb46 	bl	80001e0 <memchr>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d03f      	beq.n	8001bd8 <_vfiprintf_r+0x22c>
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <_vfiprintf_r+0x254>)
 8001b5a:	bb1b      	cbnz	r3, 8001ba4 <_vfiprintf_r+0x1f8>
 8001b5c:	9b03      	ldr	r3, [sp, #12]
 8001b5e:	3307      	adds	r3, #7
 8001b60:	f023 0307 	bic.w	r3, r3, #7
 8001b64:	3308      	adds	r3, #8
 8001b66:	9303      	str	r3, [sp, #12]
 8001b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b6a:	443b      	add	r3, r7
 8001b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8001b6e:	e767      	b.n	8001a40 <_vfiprintf_r+0x94>
 8001b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b74:	460c      	mov	r4, r1
 8001b76:	2001      	movs	r0, #1
 8001b78:	e7a5      	b.n	8001ac6 <_vfiprintf_r+0x11a>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	3401      	adds	r4, #1
 8001b7e:	9305      	str	r3, [sp, #20]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0c0a 	mov.w	ip, #10
 8001b86:	4620      	mov	r0, r4
 8001b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b8c:	3a30      	subs	r2, #48	; 0x30
 8001b8e:	2a09      	cmp	r2, #9
 8001b90:	d903      	bls.n	8001b9a <_vfiprintf_r+0x1ee>
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0c5      	beq.n	8001b22 <_vfiprintf_r+0x176>
 8001b96:	9105      	str	r1, [sp, #20]
 8001b98:	e7c3      	b.n	8001b22 <_vfiprintf_r+0x176>
 8001b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e7f0      	b.n	8001b86 <_vfiprintf_r+0x1da>
 8001ba4:	ab03      	add	r3, sp, #12
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	462a      	mov	r2, r5
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <_vfiprintf_r+0x258>)
 8001bac:	a904      	add	r1, sp, #16
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f3af 8000 	nop.w
 8001bb4:	4607      	mov	r7, r0
 8001bb6:	1c78      	adds	r0, r7, #1
 8001bb8:	d1d6      	bne.n	8001b68 <_vfiprintf_r+0x1bc>
 8001bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bbc:	07d9      	lsls	r1, r3, #31
 8001bbe:	d405      	bmi.n	8001bcc <_vfiprintf_r+0x220>
 8001bc0:	89ab      	ldrh	r3, [r5, #12]
 8001bc2:	059a      	lsls	r2, r3, #22
 8001bc4:	d402      	bmi.n	8001bcc <_vfiprintf_r+0x220>
 8001bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bc8:	f7ff fe31 	bl	800182e <__retarget_lock_release_recursive>
 8001bcc:	89ab      	ldrh	r3, [r5, #12]
 8001bce:	065b      	lsls	r3, r3, #25
 8001bd0:	f53f af12 	bmi.w	80019f8 <_vfiprintf_r+0x4c>
 8001bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bd6:	e711      	b.n	80019fc <_vfiprintf_r+0x50>
 8001bd8:	ab03      	add	r3, sp, #12
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	462a      	mov	r2, r5
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <_vfiprintf_r+0x258>)
 8001be0:	a904      	add	r1, sp, #16
 8001be2:	4630      	mov	r0, r6
 8001be4:	f000 f880 	bl	8001ce8 <_printf_i>
 8001be8:	e7e4      	b.n	8001bb4 <_vfiprintf_r+0x208>
 8001bea:	bf00      	nop
 8001bec:	0800258c 	.word	0x0800258c
 8001bf0:	080025ac 	.word	0x080025ac
 8001bf4:	0800256c 	.word	0x0800256c
 8001bf8:	080025cc 	.word	0x080025cc
 8001bfc:	080025d6 	.word	0x080025d6
 8001c00:	00000000 	.word	0x00000000
 8001c04:	08001987 	.word	0x08001987
 8001c08:	080025d2 	.word	0x080025d2

08001c0c <_printf_common>:
 8001c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c10:	4616      	mov	r6, r2
 8001c12:	4699      	mov	r9, r3
 8001c14:	688a      	ldr	r2, [r1, #8]
 8001c16:	690b      	ldr	r3, [r1, #16]
 8001c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	bfb8      	it	lt
 8001c20:	4613      	movlt	r3, r2
 8001c22:	6033      	str	r3, [r6, #0]
 8001c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c28:	4607      	mov	r7, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	b10a      	cbz	r2, 8001c32 <_printf_common+0x26>
 8001c2e:	3301      	adds	r3, #1
 8001c30:	6033      	str	r3, [r6, #0]
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	0699      	lsls	r1, r3, #26
 8001c36:	bf42      	ittt	mi
 8001c38:	6833      	ldrmi	r3, [r6, #0]
 8001c3a:	3302      	addmi	r3, #2
 8001c3c:	6033      	strmi	r3, [r6, #0]
 8001c3e:	6825      	ldr	r5, [r4, #0]
 8001c40:	f015 0506 	ands.w	r5, r5, #6
 8001c44:	d106      	bne.n	8001c54 <_printf_common+0x48>
 8001c46:	f104 0a19 	add.w	sl, r4, #25
 8001c4a:	68e3      	ldr	r3, [r4, #12]
 8001c4c:	6832      	ldr	r2, [r6, #0]
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	42ab      	cmp	r3, r5
 8001c52:	dc26      	bgt.n	8001ca2 <_printf_common+0x96>
 8001c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c58:	1e13      	subs	r3, r2, #0
 8001c5a:	6822      	ldr	r2, [r4, #0]
 8001c5c:	bf18      	it	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	0692      	lsls	r2, r2, #26
 8001c62:	d42b      	bmi.n	8001cbc <_printf_common+0xb0>
 8001c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c68:	4649      	mov	r1, r9
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	47c0      	blx	r8
 8001c6e:	3001      	adds	r0, #1
 8001c70:	d01e      	beq.n	8001cb0 <_printf_common+0xa4>
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	68e5      	ldr	r5, [r4, #12]
 8001c76:	6832      	ldr	r2, [r6, #0]
 8001c78:	f003 0306 	and.w	r3, r3, #6
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	bf08      	it	eq
 8001c80:	1aad      	subeq	r5, r5, r2
 8001c82:	68a3      	ldr	r3, [r4, #8]
 8001c84:	6922      	ldr	r2, [r4, #16]
 8001c86:	bf0c      	ite	eq
 8001c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c8c:	2500      	movne	r5, #0
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	bfc4      	itt	gt
 8001c92:	1a9b      	subgt	r3, r3, r2
 8001c94:	18ed      	addgt	r5, r5, r3
 8001c96:	2600      	movs	r6, #0
 8001c98:	341a      	adds	r4, #26
 8001c9a:	42b5      	cmp	r5, r6
 8001c9c:	d11a      	bne.n	8001cd4 <_printf_common+0xc8>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e008      	b.n	8001cb4 <_printf_common+0xa8>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	4652      	mov	r2, sl
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	4638      	mov	r0, r7
 8001caa:	47c0      	blx	r8
 8001cac:	3001      	adds	r0, #1
 8001cae:	d103      	bne.n	8001cb8 <_printf_common+0xac>
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb8:	3501      	adds	r5, #1
 8001cba:	e7c6      	b.n	8001c4a <_printf_common+0x3e>
 8001cbc:	18e1      	adds	r1, r4, r3
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	2030      	movs	r0, #48	; 0x30
 8001cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cc6:	4422      	add	r2, r4
 8001cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	e7c7      	b.n	8001c64 <_printf_common+0x58>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	4649      	mov	r1, r9
 8001cda:	4638      	mov	r0, r7
 8001cdc:	47c0      	blx	r8
 8001cde:	3001      	adds	r0, #1
 8001ce0:	d0e6      	beq.n	8001cb0 <_printf_common+0xa4>
 8001ce2:	3601      	adds	r6, #1
 8001ce4:	e7d9      	b.n	8001c9a <_printf_common+0x8e>
	...

08001ce8 <_printf_i>:
 8001ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cec:	7e0f      	ldrb	r7, [r1, #24]
 8001cee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001cf0:	2f78      	cmp	r7, #120	; 0x78
 8001cf2:	4691      	mov	r9, r2
 8001cf4:	4680      	mov	r8, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	469a      	mov	sl, r3
 8001cfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001cfe:	d807      	bhi.n	8001d10 <_printf_i+0x28>
 8001d00:	2f62      	cmp	r7, #98	; 0x62
 8001d02:	d80a      	bhi.n	8001d1a <_printf_i+0x32>
 8001d04:	2f00      	cmp	r7, #0
 8001d06:	f000 80d8 	beq.w	8001eba <_printf_i+0x1d2>
 8001d0a:	2f58      	cmp	r7, #88	; 0x58
 8001d0c:	f000 80a3 	beq.w	8001e56 <_printf_i+0x16e>
 8001d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d18:	e03a      	b.n	8001d90 <_printf_i+0xa8>
 8001d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d1e:	2b15      	cmp	r3, #21
 8001d20:	d8f6      	bhi.n	8001d10 <_printf_i+0x28>
 8001d22:	a101      	add	r1, pc, #4	; (adr r1, 8001d28 <_printf_i+0x40>)
 8001d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d28:	08001d81 	.word	0x08001d81
 8001d2c:	08001d95 	.word	0x08001d95
 8001d30:	08001d11 	.word	0x08001d11
 8001d34:	08001d11 	.word	0x08001d11
 8001d38:	08001d11 	.word	0x08001d11
 8001d3c:	08001d11 	.word	0x08001d11
 8001d40:	08001d95 	.word	0x08001d95
 8001d44:	08001d11 	.word	0x08001d11
 8001d48:	08001d11 	.word	0x08001d11
 8001d4c:	08001d11 	.word	0x08001d11
 8001d50:	08001d11 	.word	0x08001d11
 8001d54:	08001ea1 	.word	0x08001ea1
 8001d58:	08001dc5 	.word	0x08001dc5
 8001d5c:	08001e83 	.word	0x08001e83
 8001d60:	08001d11 	.word	0x08001d11
 8001d64:	08001d11 	.word	0x08001d11
 8001d68:	08001ec3 	.word	0x08001ec3
 8001d6c:	08001d11 	.word	0x08001d11
 8001d70:	08001dc5 	.word	0x08001dc5
 8001d74:	08001d11 	.word	0x08001d11
 8001d78:	08001d11 	.word	0x08001d11
 8001d7c:	08001e8b 	.word	0x08001e8b
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	1d1a      	adds	r2, r3, #4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	602a      	str	r2, [r5, #0]
 8001d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0a3      	b.n	8001edc <_printf_i+0x1f4>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	6829      	ldr	r1, [r5, #0]
 8001d98:	0606      	lsls	r6, r0, #24
 8001d9a:	f101 0304 	add.w	r3, r1, #4
 8001d9e:	d50a      	bpl.n	8001db6 <_printf_i+0xce>
 8001da0:	680e      	ldr	r6, [r1, #0]
 8001da2:	602b      	str	r3, [r5, #0]
 8001da4:	2e00      	cmp	r6, #0
 8001da6:	da03      	bge.n	8001db0 <_printf_i+0xc8>
 8001da8:	232d      	movs	r3, #45	; 0x2d
 8001daa:	4276      	negs	r6, r6
 8001dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001db0:	485e      	ldr	r0, [pc, #376]	; (8001f2c <_printf_i+0x244>)
 8001db2:	230a      	movs	r3, #10
 8001db4:	e019      	b.n	8001dea <_printf_i+0x102>
 8001db6:	680e      	ldr	r6, [r1, #0]
 8001db8:	602b      	str	r3, [r5, #0]
 8001dba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001dbe:	bf18      	it	ne
 8001dc0:	b236      	sxthne	r6, r6
 8001dc2:	e7ef      	b.n	8001da4 <_printf_i+0xbc>
 8001dc4:	682b      	ldr	r3, [r5, #0]
 8001dc6:	6820      	ldr	r0, [r4, #0]
 8001dc8:	1d19      	adds	r1, r3, #4
 8001dca:	6029      	str	r1, [r5, #0]
 8001dcc:	0601      	lsls	r1, r0, #24
 8001dce:	d501      	bpl.n	8001dd4 <_printf_i+0xec>
 8001dd0:	681e      	ldr	r6, [r3, #0]
 8001dd2:	e002      	b.n	8001dda <_printf_i+0xf2>
 8001dd4:	0646      	lsls	r6, r0, #25
 8001dd6:	d5fb      	bpl.n	8001dd0 <_printf_i+0xe8>
 8001dd8:	881e      	ldrh	r6, [r3, #0]
 8001dda:	4854      	ldr	r0, [pc, #336]	; (8001f2c <_printf_i+0x244>)
 8001ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8001dde:	bf0c      	ite	eq
 8001de0:	2308      	moveq	r3, #8
 8001de2:	230a      	movne	r3, #10
 8001de4:	2100      	movs	r1, #0
 8001de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001dea:	6865      	ldr	r5, [r4, #4]
 8001dec:	60a5      	str	r5, [r4, #8]
 8001dee:	2d00      	cmp	r5, #0
 8001df0:	bfa2      	ittt	ge
 8001df2:	6821      	ldrge	r1, [r4, #0]
 8001df4:	f021 0104 	bicge.w	r1, r1, #4
 8001df8:	6021      	strge	r1, [r4, #0]
 8001dfa:	b90e      	cbnz	r6, 8001e00 <_printf_i+0x118>
 8001dfc:	2d00      	cmp	r5, #0
 8001dfe:	d04d      	beq.n	8001e9c <_printf_i+0x1b4>
 8001e00:	4615      	mov	r5, r2
 8001e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e06:	fb03 6711 	mls	r7, r3, r1, r6
 8001e0a:	5dc7      	ldrb	r7, [r0, r7]
 8001e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e10:	4637      	mov	r7, r6
 8001e12:	42bb      	cmp	r3, r7
 8001e14:	460e      	mov	r6, r1
 8001e16:	d9f4      	bls.n	8001e02 <_printf_i+0x11a>
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d10b      	bne.n	8001e34 <_printf_i+0x14c>
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	07de      	lsls	r6, r3, #31
 8001e20:	d508      	bpl.n	8001e34 <_printf_i+0x14c>
 8001e22:	6923      	ldr	r3, [r4, #16]
 8001e24:	6861      	ldr	r1, [r4, #4]
 8001e26:	4299      	cmp	r1, r3
 8001e28:	bfde      	ittt	le
 8001e2a:	2330      	movle	r3, #48	; 0x30
 8001e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e34:	1b52      	subs	r2, r2, r5
 8001e36:	6122      	str	r2, [r4, #16]
 8001e38:	f8cd a000 	str.w	sl, [sp]
 8001e3c:	464b      	mov	r3, r9
 8001e3e:	aa03      	add	r2, sp, #12
 8001e40:	4621      	mov	r1, r4
 8001e42:	4640      	mov	r0, r8
 8001e44:	f7ff fee2 	bl	8001c0c <_printf_common>
 8001e48:	3001      	adds	r0, #1
 8001e4a:	d14c      	bne.n	8001ee6 <_printf_i+0x1fe>
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	b004      	add	sp, #16
 8001e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e56:	4835      	ldr	r0, [pc, #212]	; (8001f2c <_printf_i+0x244>)
 8001e58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e5c:	6829      	ldr	r1, [r5, #0]
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e64:	6029      	str	r1, [r5, #0]
 8001e66:	061d      	lsls	r5, r3, #24
 8001e68:	d514      	bpl.n	8001e94 <_printf_i+0x1ac>
 8001e6a:	07df      	lsls	r7, r3, #31
 8001e6c:	bf44      	itt	mi
 8001e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8001e72:	6023      	strmi	r3, [r4, #0]
 8001e74:	b91e      	cbnz	r6, 8001e7e <_printf_i+0x196>
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	f023 0320 	bic.w	r3, r3, #32
 8001e7c:	6023      	str	r3, [r4, #0]
 8001e7e:	2310      	movs	r3, #16
 8001e80:	e7b0      	b.n	8001de4 <_printf_i+0xfc>
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	f043 0320 	orr.w	r3, r3, #32
 8001e88:	6023      	str	r3, [r4, #0]
 8001e8a:	2378      	movs	r3, #120	; 0x78
 8001e8c:	4828      	ldr	r0, [pc, #160]	; (8001f30 <_printf_i+0x248>)
 8001e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e92:	e7e3      	b.n	8001e5c <_printf_i+0x174>
 8001e94:	0659      	lsls	r1, r3, #25
 8001e96:	bf48      	it	mi
 8001e98:	b2b6      	uxthmi	r6, r6
 8001e9a:	e7e6      	b.n	8001e6a <_printf_i+0x182>
 8001e9c:	4615      	mov	r5, r2
 8001e9e:	e7bb      	b.n	8001e18 <_printf_i+0x130>
 8001ea0:	682b      	ldr	r3, [r5, #0]
 8001ea2:	6826      	ldr	r6, [r4, #0]
 8001ea4:	6961      	ldr	r1, [r4, #20]
 8001ea6:	1d18      	adds	r0, r3, #4
 8001ea8:	6028      	str	r0, [r5, #0]
 8001eaa:	0635      	lsls	r5, r6, #24
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	d501      	bpl.n	8001eb4 <_printf_i+0x1cc>
 8001eb0:	6019      	str	r1, [r3, #0]
 8001eb2:	e002      	b.n	8001eba <_printf_i+0x1d2>
 8001eb4:	0670      	lsls	r0, r6, #25
 8001eb6:	d5fb      	bpl.n	8001eb0 <_printf_i+0x1c8>
 8001eb8:	8019      	strh	r1, [r3, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6123      	str	r3, [r4, #16]
 8001ebe:	4615      	mov	r5, r2
 8001ec0:	e7ba      	b.n	8001e38 <_printf_i+0x150>
 8001ec2:	682b      	ldr	r3, [r5, #0]
 8001ec4:	1d1a      	adds	r2, r3, #4
 8001ec6:	602a      	str	r2, [r5, #0]
 8001ec8:	681d      	ldr	r5, [r3, #0]
 8001eca:	6862      	ldr	r2, [r4, #4]
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f7fe f986 	bl	80001e0 <memchr>
 8001ed4:	b108      	cbz	r0, 8001eda <_printf_i+0x1f2>
 8001ed6:	1b40      	subs	r0, r0, r5
 8001ed8:	6060      	str	r0, [r4, #4]
 8001eda:	6863      	ldr	r3, [r4, #4]
 8001edc:	6123      	str	r3, [r4, #16]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ee4:	e7a8      	b.n	8001e38 <_printf_i+0x150>
 8001ee6:	6923      	ldr	r3, [r4, #16]
 8001ee8:	462a      	mov	r2, r5
 8001eea:	4649      	mov	r1, r9
 8001eec:	4640      	mov	r0, r8
 8001eee:	47d0      	blx	sl
 8001ef0:	3001      	adds	r0, #1
 8001ef2:	d0ab      	beq.n	8001e4c <_printf_i+0x164>
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	079b      	lsls	r3, r3, #30
 8001ef8:	d413      	bmi.n	8001f22 <_printf_i+0x23a>
 8001efa:	68e0      	ldr	r0, [r4, #12]
 8001efc:	9b03      	ldr	r3, [sp, #12]
 8001efe:	4298      	cmp	r0, r3
 8001f00:	bfb8      	it	lt
 8001f02:	4618      	movlt	r0, r3
 8001f04:	e7a4      	b.n	8001e50 <_printf_i+0x168>
 8001f06:	2301      	movs	r3, #1
 8001f08:	4632      	mov	r2, r6
 8001f0a:	4649      	mov	r1, r9
 8001f0c:	4640      	mov	r0, r8
 8001f0e:	47d0      	blx	sl
 8001f10:	3001      	adds	r0, #1
 8001f12:	d09b      	beq.n	8001e4c <_printf_i+0x164>
 8001f14:	3501      	adds	r5, #1
 8001f16:	68e3      	ldr	r3, [r4, #12]
 8001f18:	9903      	ldr	r1, [sp, #12]
 8001f1a:	1a5b      	subs	r3, r3, r1
 8001f1c:	42ab      	cmp	r3, r5
 8001f1e:	dcf2      	bgt.n	8001f06 <_printf_i+0x21e>
 8001f20:	e7eb      	b.n	8001efa <_printf_i+0x212>
 8001f22:	2500      	movs	r5, #0
 8001f24:	f104 0619 	add.w	r6, r4, #25
 8001f28:	e7f5      	b.n	8001f16 <_printf_i+0x22e>
 8001f2a:	bf00      	nop
 8001f2c:	080025dd 	.word	0x080025dd
 8001f30:	080025ee 	.word	0x080025ee

08001f34 <_sbrk_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	4d06      	ldr	r5, [pc, #24]	; (8001f50 <_sbrk_r+0x1c>)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	602b      	str	r3, [r5, #0]
 8001f40:	f7fe fcac 	bl	800089c <_sbrk>
 8001f44:	1c43      	adds	r3, r0, #1
 8001f46:	d102      	bne.n	8001f4e <_sbrk_r+0x1a>
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	b103      	cbz	r3, 8001f4e <_sbrk_r+0x1a>
 8001f4c:	6023      	str	r3, [r4, #0]
 8001f4e:	bd38      	pop	{r3, r4, r5, pc}
 8001f50:	200000a8 	.word	0x200000a8

08001f54 <__sread>:
 8001f54:	b510      	push	{r4, lr}
 8001f56:	460c      	mov	r4, r1
 8001f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f5c:	f000 fab2 	bl	80024c4 <_read_r>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	bfab      	itete	ge
 8001f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f66:	89a3      	ldrhlt	r3, [r4, #12]
 8001f68:	181b      	addge	r3, r3, r0
 8001f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f6e:	bfac      	ite	ge
 8001f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f72:	81a3      	strhlt	r3, [r4, #12]
 8001f74:	bd10      	pop	{r4, pc}

08001f76 <__swrite>:
 8001f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f7a:	461f      	mov	r7, r3
 8001f7c:	898b      	ldrh	r3, [r1, #12]
 8001f7e:	05db      	lsls	r3, r3, #23
 8001f80:	4605      	mov	r5, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	4616      	mov	r6, r2
 8001f86:	d505      	bpl.n	8001f94 <__swrite+0x1e>
 8001f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f000 f9c8 	bl	8002324 <_lseek_r>
 8001f94:	89a3      	ldrh	r3, [r4, #12]
 8001f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f9e:	81a3      	strh	r3, [r4, #12]
 8001fa0:	4632      	mov	r2, r6
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001faa:	f000 b869 	b.w	8002080 <_write_r>

08001fae <__sseek>:
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb6:	f000 f9b5 	bl	8002324 <_lseek_r>
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	89a3      	ldrh	r3, [r4, #12]
 8001fbe:	bf15      	itete	ne
 8001fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fca:	81a3      	strheq	r3, [r4, #12]
 8001fcc:	bf18      	it	ne
 8001fce:	81a3      	strhne	r3, [r4, #12]
 8001fd0:	bd10      	pop	{r4, pc}

08001fd2 <__sclose>:
 8001fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fd6:	f000 b8d3 	b.w	8002180 <_close_r>
	...

08001fdc <__swbuf_r>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	460e      	mov	r6, r1
 8001fe0:	4614      	mov	r4, r2
 8001fe2:	4605      	mov	r5, r0
 8001fe4:	b118      	cbz	r0, 8001fee <__swbuf_r+0x12>
 8001fe6:	6983      	ldr	r3, [r0, #24]
 8001fe8:	b90b      	cbnz	r3, 8001fee <__swbuf_r+0x12>
 8001fea:	f7ff fb81 	bl	80016f0 <__sinit>
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <__swbuf_r+0x98>)
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	d12b      	bne.n	800204c <__swbuf_r+0x70>
 8001ff4:	686c      	ldr	r4, [r5, #4]
 8001ff6:	69a3      	ldr	r3, [r4, #24]
 8001ff8:	60a3      	str	r3, [r4, #8]
 8001ffa:	89a3      	ldrh	r3, [r4, #12]
 8001ffc:	071a      	lsls	r2, r3, #28
 8001ffe:	d52f      	bpl.n	8002060 <__swbuf_r+0x84>
 8002000:	6923      	ldr	r3, [r4, #16]
 8002002:	b36b      	cbz	r3, 8002060 <__swbuf_r+0x84>
 8002004:	6923      	ldr	r3, [r4, #16]
 8002006:	6820      	ldr	r0, [r4, #0]
 8002008:	1ac0      	subs	r0, r0, r3
 800200a:	6963      	ldr	r3, [r4, #20]
 800200c:	b2f6      	uxtb	r6, r6
 800200e:	4283      	cmp	r3, r0
 8002010:	4637      	mov	r7, r6
 8002012:	dc04      	bgt.n	800201e <__swbuf_r+0x42>
 8002014:	4621      	mov	r1, r4
 8002016:	4628      	mov	r0, r5
 8002018:	f000 f948 	bl	80022ac <_fflush_r>
 800201c:	bb30      	cbnz	r0, 800206c <__swbuf_r+0x90>
 800201e:	68a3      	ldr	r3, [r4, #8]
 8002020:	3b01      	subs	r3, #1
 8002022:	60a3      	str	r3, [r4, #8]
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	6022      	str	r2, [r4, #0]
 800202a:	701e      	strb	r6, [r3, #0]
 800202c:	6963      	ldr	r3, [r4, #20]
 800202e:	3001      	adds	r0, #1
 8002030:	4283      	cmp	r3, r0
 8002032:	d004      	beq.n	800203e <__swbuf_r+0x62>
 8002034:	89a3      	ldrh	r3, [r4, #12]
 8002036:	07db      	lsls	r3, r3, #31
 8002038:	d506      	bpl.n	8002048 <__swbuf_r+0x6c>
 800203a:	2e0a      	cmp	r6, #10
 800203c:	d104      	bne.n	8002048 <__swbuf_r+0x6c>
 800203e:	4621      	mov	r1, r4
 8002040:	4628      	mov	r0, r5
 8002042:	f000 f933 	bl	80022ac <_fflush_r>
 8002046:	b988      	cbnz	r0, 800206c <__swbuf_r+0x90>
 8002048:	4638      	mov	r0, r7
 800204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <__swbuf_r+0x9c>)
 800204e:	429c      	cmp	r4, r3
 8002050:	d101      	bne.n	8002056 <__swbuf_r+0x7a>
 8002052:	68ac      	ldr	r4, [r5, #8]
 8002054:	e7cf      	b.n	8001ff6 <__swbuf_r+0x1a>
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <__swbuf_r+0xa0>)
 8002058:	429c      	cmp	r4, r3
 800205a:	bf08      	it	eq
 800205c:	68ec      	ldreq	r4, [r5, #12]
 800205e:	e7ca      	b.n	8001ff6 <__swbuf_r+0x1a>
 8002060:	4621      	mov	r1, r4
 8002062:	4628      	mov	r0, r5
 8002064:	f000 f81e 	bl	80020a4 <__swsetup_r>
 8002068:	2800      	cmp	r0, #0
 800206a:	d0cb      	beq.n	8002004 <__swbuf_r+0x28>
 800206c:	f04f 37ff 	mov.w	r7, #4294967295
 8002070:	e7ea      	b.n	8002048 <__swbuf_r+0x6c>
 8002072:	bf00      	nop
 8002074:	0800258c 	.word	0x0800258c
 8002078:	080025ac 	.word	0x080025ac
 800207c:	0800256c 	.word	0x0800256c

08002080 <_write_r>:
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4d07      	ldr	r5, [pc, #28]	; (80020a0 <_write_r+0x20>)
 8002084:	4604      	mov	r4, r0
 8002086:	4608      	mov	r0, r1
 8002088:	4611      	mov	r1, r2
 800208a:	2200      	movs	r2, #0
 800208c:	602a      	str	r2, [r5, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	f7fe fad4 	bl	800063c <_write>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d102      	bne.n	800209e <_write_r+0x1e>
 8002098:	682b      	ldr	r3, [r5, #0]
 800209a:	b103      	cbz	r3, 800209e <_write_r+0x1e>
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	bd38      	pop	{r3, r4, r5, pc}
 80020a0:	200000a8 	.word	0x200000a8

080020a4 <__swsetup_r>:
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <__swsetup_r+0xcc>)
 80020a6:	b570      	push	{r4, r5, r6, lr}
 80020a8:	681d      	ldr	r5, [r3, #0]
 80020aa:	4606      	mov	r6, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	b125      	cbz	r5, 80020ba <__swsetup_r+0x16>
 80020b0:	69ab      	ldr	r3, [r5, #24]
 80020b2:	b913      	cbnz	r3, 80020ba <__swsetup_r+0x16>
 80020b4:	4628      	mov	r0, r5
 80020b6:	f7ff fb1b 	bl	80016f0 <__sinit>
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <__swsetup_r+0xd0>)
 80020bc:	429c      	cmp	r4, r3
 80020be:	d10f      	bne.n	80020e0 <__swsetup_r+0x3c>
 80020c0:	686c      	ldr	r4, [r5, #4]
 80020c2:	89a3      	ldrh	r3, [r4, #12]
 80020c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020c8:	0719      	lsls	r1, r3, #28
 80020ca:	d42c      	bmi.n	8002126 <__swsetup_r+0x82>
 80020cc:	06dd      	lsls	r5, r3, #27
 80020ce:	d411      	bmi.n	80020f4 <__swsetup_r+0x50>
 80020d0:	2309      	movs	r3, #9
 80020d2:	6033      	str	r3, [r6, #0]
 80020d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020d8:	81a3      	strh	r3, [r4, #12]
 80020da:	f04f 30ff 	mov.w	r0, #4294967295
 80020de:	e03e      	b.n	800215e <__swsetup_r+0xba>
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <__swsetup_r+0xd4>)
 80020e2:	429c      	cmp	r4, r3
 80020e4:	d101      	bne.n	80020ea <__swsetup_r+0x46>
 80020e6:	68ac      	ldr	r4, [r5, #8]
 80020e8:	e7eb      	b.n	80020c2 <__swsetup_r+0x1e>
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <__swsetup_r+0xd8>)
 80020ec:	429c      	cmp	r4, r3
 80020ee:	bf08      	it	eq
 80020f0:	68ec      	ldreq	r4, [r5, #12]
 80020f2:	e7e6      	b.n	80020c2 <__swsetup_r+0x1e>
 80020f4:	0758      	lsls	r0, r3, #29
 80020f6:	d512      	bpl.n	800211e <__swsetup_r+0x7a>
 80020f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020fa:	b141      	cbz	r1, 800210e <__swsetup_r+0x6a>
 80020fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002100:	4299      	cmp	r1, r3
 8002102:	d002      	beq.n	800210a <__swsetup_r+0x66>
 8002104:	4630      	mov	r0, r6
 8002106:	f000 f991 	bl	800242c <_free_r>
 800210a:	2300      	movs	r3, #0
 800210c:	6363      	str	r3, [r4, #52]	; 0x34
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002114:	81a3      	strh	r3, [r4, #12]
 8002116:	2300      	movs	r3, #0
 8002118:	6063      	str	r3, [r4, #4]
 800211a:	6923      	ldr	r3, [r4, #16]
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	89a3      	ldrh	r3, [r4, #12]
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	81a3      	strh	r3, [r4, #12]
 8002126:	6923      	ldr	r3, [r4, #16]
 8002128:	b94b      	cbnz	r3, 800213e <__swsetup_r+0x9a>
 800212a:	89a3      	ldrh	r3, [r4, #12]
 800212c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002134:	d003      	beq.n	800213e <__swsetup_r+0x9a>
 8002136:	4621      	mov	r1, r4
 8002138:	4630      	mov	r0, r6
 800213a:	f000 f92b 	bl	8002394 <__smakebuf_r>
 800213e:	89a0      	ldrh	r0, [r4, #12]
 8002140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002144:	f010 0301 	ands.w	r3, r0, #1
 8002148:	d00a      	beq.n	8002160 <__swsetup_r+0xbc>
 800214a:	2300      	movs	r3, #0
 800214c:	60a3      	str	r3, [r4, #8]
 800214e:	6963      	ldr	r3, [r4, #20]
 8002150:	425b      	negs	r3, r3
 8002152:	61a3      	str	r3, [r4, #24]
 8002154:	6923      	ldr	r3, [r4, #16]
 8002156:	b943      	cbnz	r3, 800216a <__swsetup_r+0xc6>
 8002158:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800215c:	d1ba      	bne.n	80020d4 <__swsetup_r+0x30>
 800215e:	bd70      	pop	{r4, r5, r6, pc}
 8002160:	0781      	lsls	r1, r0, #30
 8002162:	bf58      	it	pl
 8002164:	6963      	ldrpl	r3, [r4, #20]
 8002166:	60a3      	str	r3, [r4, #8]
 8002168:	e7f4      	b.n	8002154 <__swsetup_r+0xb0>
 800216a:	2000      	movs	r0, #0
 800216c:	e7f7      	b.n	800215e <__swsetup_r+0xba>
 800216e:	bf00      	nop
 8002170:	2000000c 	.word	0x2000000c
 8002174:	0800258c 	.word	0x0800258c
 8002178:	080025ac 	.word	0x080025ac
 800217c:	0800256c 	.word	0x0800256c

08002180 <_close_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4d06      	ldr	r5, [pc, #24]	; (800219c <_close_r+0x1c>)
 8002184:	2300      	movs	r3, #0
 8002186:	4604      	mov	r4, r0
 8002188:	4608      	mov	r0, r1
 800218a:	602b      	str	r3, [r5, #0]
 800218c:	f7fe fb51 	bl	8000832 <_close>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d102      	bne.n	800219a <_close_r+0x1a>
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	b103      	cbz	r3, 800219a <_close_r+0x1a>
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	bd38      	pop	{r3, r4, r5, pc}
 800219c:	200000a8 	.word	0x200000a8

080021a0 <__sflush_r>:
 80021a0:	898a      	ldrh	r2, [r1, #12]
 80021a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021a6:	4605      	mov	r5, r0
 80021a8:	0710      	lsls	r0, r2, #28
 80021aa:	460c      	mov	r4, r1
 80021ac:	d458      	bmi.n	8002260 <__sflush_r+0xc0>
 80021ae:	684b      	ldr	r3, [r1, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	dc05      	bgt.n	80021c0 <__sflush_r+0x20>
 80021b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	dc02      	bgt.n	80021c0 <__sflush_r+0x20>
 80021ba:	2000      	movs	r0, #0
 80021bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021c2:	2e00      	cmp	r6, #0
 80021c4:	d0f9      	beq.n	80021ba <__sflush_r+0x1a>
 80021c6:	2300      	movs	r3, #0
 80021c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021cc:	682f      	ldr	r7, [r5, #0]
 80021ce:	602b      	str	r3, [r5, #0]
 80021d0:	d032      	beq.n	8002238 <__sflush_r+0x98>
 80021d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021d4:	89a3      	ldrh	r3, [r4, #12]
 80021d6:	075a      	lsls	r2, r3, #29
 80021d8:	d505      	bpl.n	80021e6 <__sflush_r+0x46>
 80021da:	6863      	ldr	r3, [r4, #4]
 80021dc:	1ac0      	subs	r0, r0, r3
 80021de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021e0:	b10b      	cbz	r3, 80021e6 <__sflush_r+0x46>
 80021e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021e4:	1ac0      	subs	r0, r0, r3
 80021e6:	2300      	movs	r3, #0
 80021e8:	4602      	mov	r2, r0
 80021ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021ec:	6a21      	ldr	r1, [r4, #32]
 80021ee:	4628      	mov	r0, r5
 80021f0:	47b0      	blx	r6
 80021f2:	1c43      	adds	r3, r0, #1
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	d106      	bne.n	8002206 <__sflush_r+0x66>
 80021f8:	6829      	ldr	r1, [r5, #0]
 80021fa:	291d      	cmp	r1, #29
 80021fc:	d82c      	bhi.n	8002258 <__sflush_r+0xb8>
 80021fe:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <__sflush_r+0x108>)
 8002200:	40ca      	lsrs	r2, r1
 8002202:	07d6      	lsls	r6, r2, #31
 8002204:	d528      	bpl.n	8002258 <__sflush_r+0xb8>
 8002206:	2200      	movs	r2, #0
 8002208:	6062      	str	r2, [r4, #4]
 800220a:	04d9      	lsls	r1, r3, #19
 800220c:	6922      	ldr	r2, [r4, #16]
 800220e:	6022      	str	r2, [r4, #0]
 8002210:	d504      	bpl.n	800221c <__sflush_r+0x7c>
 8002212:	1c42      	adds	r2, r0, #1
 8002214:	d101      	bne.n	800221a <__sflush_r+0x7a>
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	b903      	cbnz	r3, 800221c <__sflush_r+0x7c>
 800221a:	6560      	str	r0, [r4, #84]	; 0x54
 800221c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800221e:	602f      	str	r7, [r5, #0]
 8002220:	2900      	cmp	r1, #0
 8002222:	d0ca      	beq.n	80021ba <__sflush_r+0x1a>
 8002224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002228:	4299      	cmp	r1, r3
 800222a:	d002      	beq.n	8002232 <__sflush_r+0x92>
 800222c:	4628      	mov	r0, r5
 800222e:	f000 f8fd 	bl	800242c <_free_r>
 8002232:	2000      	movs	r0, #0
 8002234:	6360      	str	r0, [r4, #52]	; 0x34
 8002236:	e7c1      	b.n	80021bc <__sflush_r+0x1c>
 8002238:	6a21      	ldr	r1, [r4, #32]
 800223a:	2301      	movs	r3, #1
 800223c:	4628      	mov	r0, r5
 800223e:	47b0      	blx	r6
 8002240:	1c41      	adds	r1, r0, #1
 8002242:	d1c7      	bne.n	80021d4 <__sflush_r+0x34>
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0c4      	beq.n	80021d4 <__sflush_r+0x34>
 800224a:	2b1d      	cmp	r3, #29
 800224c:	d001      	beq.n	8002252 <__sflush_r+0xb2>
 800224e:	2b16      	cmp	r3, #22
 8002250:	d101      	bne.n	8002256 <__sflush_r+0xb6>
 8002252:	602f      	str	r7, [r5, #0]
 8002254:	e7b1      	b.n	80021ba <__sflush_r+0x1a>
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225c:	81a3      	strh	r3, [r4, #12]
 800225e:	e7ad      	b.n	80021bc <__sflush_r+0x1c>
 8002260:	690f      	ldr	r7, [r1, #16]
 8002262:	2f00      	cmp	r7, #0
 8002264:	d0a9      	beq.n	80021ba <__sflush_r+0x1a>
 8002266:	0793      	lsls	r3, r2, #30
 8002268:	680e      	ldr	r6, [r1, #0]
 800226a:	bf08      	it	eq
 800226c:	694b      	ldreq	r3, [r1, #20]
 800226e:	600f      	str	r7, [r1, #0]
 8002270:	bf18      	it	ne
 8002272:	2300      	movne	r3, #0
 8002274:	eba6 0807 	sub.w	r8, r6, r7
 8002278:	608b      	str	r3, [r1, #8]
 800227a:	f1b8 0f00 	cmp.w	r8, #0
 800227e:	dd9c      	ble.n	80021ba <__sflush_r+0x1a>
 8002280:	6a21      	ldr	r1, [r4, #32]
 8002282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002284:	4643      	mov	r3, r8
 8002286:	463a      	mov	r2, r7
 8002288:	4628      	mov	r0, r5
 800228a:	47b0      	blx	r6
 800228c:	2800      	cmp	r0, #0
 800228e:	dc06      	bgt.n	800229e <__sflush_r+0xfe>
 8002290:	89a3      	ldrh	r3, [r4, #12]
 8002292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002296:	81a3      	strh	r3, [r4, #12]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	e78e      	b.n	80021bc <__sflush_r+0x1c>
 800229e:	4407      	add	r7, r0
 80022a0:	eba8 0800 	sub.w	r8, r8, r0
 80022a4:	e7e9      	b.n	800227a <__sflush_r+0xda>
 80022a6:	bf00      	nop
 80022a8:	20400001 	.word	0x20400001

080022ac <_fflush_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	690b      	ldr	r3, [r1, #16]
 80022b0:	4605      	mov	r5, r0
 80022b2:	460c      	mov	r4, r1
 80022b4:	b913      	cbnz	r3, 80022bc <_fflush_r+0x10>
 80022b6:	2500      	movs	r5, #0
 80022b8:	4628      	mov	r0, r5
 80022ba:	bd38      	pop	{r3, r4, r5, pc}
 80022bc:	b118      	cbz	r0, 80022c6 <_fflush_r+0x1a>
 80022be:	6983      	ldr	r3, [r0, #24]
 80022c0:	b90b      	cbnz	r3, 80022c6 <_fflush_r+0x1a>
 80022c2:	f7ff fa15 	bl	80016f0 <__sinit>
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <_fflush_r+0x6c>)
 80022c8:	429c      	cmp	r4, r3
 80022ca:	d11b      	bne.n	8002304 <_fflush_r+0x58>
 80022cc:	686c      	ldr	r4, [r5, #4]
 80022ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ef      	beq.n	80022b6 <_fflush_r+0xa>
 80022d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022d8:	07d0      	lsls	r0, r2, #31
 80022da:	d404      	bmi.n	80022e6 <_fflush_r+0x3a>
 80022dc:	0599      	lsls	r1, r3, #22
 80022de:	d402      	bmi.n	80022e6 <_fflush_r+0x3a>
 80022e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022e2:	f7ff faa3 	bl	800182c <__retarget_lock_acquire_recursive>
 80022e6:	4628      	mov	r0, r5
 80022e8:	4621      	mov	r1, r4
 80022ea:	f7ff ff59 	bl	80021a0 <__sflush_r>
 80022ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022f0:	07da      	lsls	r2, r3, #31
 80022f2:	4605      	mov	r5, r0
 80022f4:	d4e0      	bmi.n	80022b8 <_fflush_r+0xc>
 80022f6:	89a3      	ldrh	r3, [r4, #12]
 80022f8:	059b      	lsls	r3, r3, #22
 80022fa:	d4dd      	bmi.n	80022b8 <_fflush_r+0xc>
 80022fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022fe:	f7ff fa96 	bl	800182e <__retarget_lock_release_recursive>
 8002302:	e7d9      	b.n	80022b8 <_fflush_r+0xc>
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <_fflush_r+0x70>)
 8002306:	429c      	cmp	r4, r3
 8002308:	d101      	bne.n	800230e <_fflush_r+0x62>
 800230a:	68ac      	ldr	r4, [r5, #8]
 800230c:	e7df      	b.n	80022ce <_fflush_r+0x22>
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <_fflush_r+0x74>)
 8002310:	429c      	cmp	r4, r3
 8002312:	bf08      	it	eq
 8002314:	68ec      	ldreq	r4, [r5, #12]
 8002316:	e7da      	b.n	80022ce <_fflush_r+0x22>
 8002318:	0800258c 	.word	0x0800258c
 800231c:	080025ac 	.word	0x080025ac
 8002320:	0800256c 	.word	0x0800256c

08002324 <_lseek_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4d07      	ldr	r5, [pc, #28]	; (8002344 <_lseek_r+0x20>)
 8002328:	4604      	mov	r4, r0
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	2200      	movs	r2, #0
 8002330:	602a      	str	r2, [r5, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	f7fe faa4 	bl	8000880 <_lseek>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_lseek_r+0x1e>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_lseek_r+0x1e>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	200000a8 	.word	0x200000a8

08002348 <__swhatbuf_r>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	460e      	mov	r6, r1
 800234c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002350:	2900      	cmp	r1, #0
 8002352:	b096      	sub	sp, #88	; 0x58
 8002354:	4614      	mov	r4, r2
 8002356:	461d      	mov	r5, r3
 8002358:	da08      	bge.n	800236c <__swhatbuf_r+0x24>
 800235a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	602a      	str	r2, [r5, #0]
 8002362:	061a      	lsls	r2, r3, #24
 8002364:	d410      	bmi.n	8002388 <__swhatbuf_r+0x40>
 8002366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236a:	e00e      	b.n	800238a <__swhatbuf_r+0x42>
 800236c:	466a      	mov	r2, sp
 800236e:	f000 f8bb 	bl	80024e8 <_fstat_r>
 8002372:	2800      	cmp	r0, #0
 8002374:	dbf1      	blt.n	800235a <__swhatbuf_r+0x12>
 8002376:	9a01      	ldr	r2, [sp, #4]
 8002378:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800237c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002380:	425a      	negs	r2, r3
 8002382:	415a      	adcs	r2, r3
 8002384:	602a      	str	r2, [r5, #0]
 8002386:	e7ee      	b.n	8002366 <__swhatbuf_r+0x1e>
 8002388:	2340      	movs	r3, #64	; 0x40
 800238a:	2000      	movs	r0, #0
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	b016      	add	sp, #88	; 0x58
 8002390:	bd70      	pop	{r4, r5, r6, pc}
	...

08002394 <__smakebuf_r>:
 8002394:	898b      	ldrh	r3, [r1, #12]
 8002396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002398:	079d      	lsls	r5, r3, #30
 800239a:	4606      	mov	r6, r0
 800239c:	460c      	mov	r4, r1
 800239e:	d507      	bpl.n	80023b0 <__smakebuf_r+0x1c>
 80023a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	6123      	str	r3, [r4, #16]
 80023a8:	2301      	movs	r3, #1
 80023aa:	6163      	str	r3, [r4, #20]
 80023ac:	b002      	add	sp, #8
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	ab01      	add	r3, sp, #4
 80023b2:	466a      	mov	r2, sp
 80023b4:	f7ff ffc8 	bl	8002348 <__swhatbuf_r>
 80023b8:	9900      	ldr	r1, [sp, #0]
 80023ba:	4605      	mov	r5, r0
 80023bc:	4630      	mov	r0, r6
 80023be:	f7ff fa57 	bl	8001870 <_malloc_r>
 80023c2:	b948      	cbnz	r0, 80023d8 <__smakebuf_r+0x44>
 80023c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023c8:	059a      	lsls	r2, r3, #22
 80023ca:	d4ef      	bmi.n	80023ac <__smakebuf_r+0x18>
 80023cc:	f023 0303 	bic.w	r3, r3, #3
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	81a3      	strh	r3, [r4, #12]
 80023d6:	e7e3      	b.n	80023a0 <__smakebuf_r+0xc>
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <__smakebuf_r+0x7c>)
 80023da:	62b3      	str	r3, [r6, #40]	; 0x28
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	6020      	str	r0, [r4, #0]
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	81a3      	strh	r3, [r4, #12]
 80023e6:	9b00      	ldr	r3, [sp, #0]
 80023e8:	6163      	str	r3, [r4, #20]
 80023ea:	9b01      	ldr	r3, [sp, #4]
 80023ec:	6120      	str	r0, [r4, #16]
 80023ee:	b15b      	cbz	r3, 8002408 <__smakebuf_r+0x74>
 80023f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023f4:	4630      	mov	r0, r6
 80023f6:	f000 f889 	bl	800250c <_isatty_r>
 80023fa:	b128      	cbz	r0, 8002408 <__smakebuf_r+0x74>
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	81a3      	strh	r3, [r4, #12]
 8002408:	89a0      	ldrh	r0, [r4, #12]
 800240a:	4305      	orrs	r5, r0
 800240c:	81a5      	strh	r5, [r4, #12]
 800240e:	e7cd      	b.n	80023ac <__smakebuf_r+0x18>
 8002410:	08001689 	.word	0x08001689

08002414 <__malloc_lock>:
 8002414:	4801      	ldr	r0, [pc, #4]	; (800241c <__malloc_lock+0x8>)
 8002416:	f7ff ba09 	b.w	800182c <__retarget_lock_acquire_recursive>
 800241a:	bf00      	nop
 800241c:	2000009c 	.word	0x2000009c

08002420 <__malloc_unlock>:
 8002420:	4801      	ldr	r0, [pc, #4]	; (8002428 <__malloc_unlock+0x8>)
 8002422:	f7ff ba04 	b.w	800182e <__retarget_lock_release_recursive>
 8002426:	bf00      	nop
 8002428:	2000009c 	.word	0x2000009c

0800242c <_free_r>:
 800242c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800242e:	2900      	cmp	r1, #0
 8002430:	d044      	beq.n	80024bc <_free_r+0x90>
 8002432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002436:	9001      	str	r0, [sp, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f1a1 0404 	sub.w	r4, r1, #4
 800243e:	bfb8      	it	lt
 8002440:	18e4      	addlt	r4, r4, r3
 8002442:	f7ff ffe7 	bl	8002414 <__malloc_lock>
 8002446:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <_free_r+0x94>)
 8002448:	9801      	ldr	r0, [sp, #4]
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	b933      	cbnz	r3, 800245c <_free_r+0x30>
 800244e:	6063      	str	r3, [r4, #4]
 8002450:	6014      	str	r4, [r2, #0]
 8002452:	b003      	add	sp, #12
 8002454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002458:	f7ff bfe2 	b.w	8002420 <__malloc_unlock>
 800245c:	42a3      	cmp	r3, r4
 800245e:	d908      	bls.n	8002472 <_free_r+0x46>
 8002460:	6825      	ldr	r5, [r4, #0]
 8002462:	1961      	adds	r1, r4, r5
 8002464:	428b      	cmp	r3, r1
 8002466:	bf01      	itttt	eq
 8002468:	6819      	ldreq	r1, [r3, #0]
 800246a:	685b      	ldreq	r3, [r3, #4]
 800246c:	1949      	addeq	r1, r1, r5
 800246e:	6021      	streq	r1, [r4, #0]
 8002470:	e7ed      	b.n	800244e <_free_r+0x22>
 8002472:	461a      	mov	r2, r3
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	b10b      	cbz	r3, 800247c <_free_r+0x50>
 8002478:	42a3      	cmp	r3, r4
 800247a:	d9fa      	bls.n	8002472 <_free_r+0x46>
 800247c:	6811      	ldr	r1, [r2, #0]
 800247e:	1855      	adds	r5, r2, r1
 8002480:	42a5      	cmp	r5, r4
 8002482:	d10b      	bne.n	800249c <_free_r+0x70>
 8002484:	6824      	ldr	r4, [r4, #0]
 8002486:	4421      	add	r1, r4
 8002488:	1854      	adds	r4, r2, r1
 800248a:	42a3      	cmp	r3, r4
 800248c:	6011      	str	r1, [r2, #0]
 800248e:	d1e0      	bne.n	8002452 <_free_r+0x26>
 8002490:	681c      	ldr	r4, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	6053      	str	r3, [r2, #4]
 8002496:	4421      	add	r1, r4
 8002498:	6011      	str	r1, [r2, #0]
 800249a:	e7da      	b.n	8002452 <_free_r+0x26>
 800249c:	d902      	bls.n	80024a4 <_free_r+0x78>
 800249e:	230c      	movs	r3, #12
 80024a0:	6003      	str	r3, [r0, #0]
 80024a2:	e7d6      	b.n	8002452 <_free_r+0x26>
 80024a4:	6825      	ldr	r5, [r4, #0]
 80024a6:	1961      	adds	r1, r4, r5
 80024a8:	428b      	cmp	r3, r1
 80024aa:	bf04      	itt	eq
 80024ac:	6819      	ldreq	r1, [r3, #0]
 80024ae:	685b      	ldreq	r3, [r3, #4]
 80024b0:	6063      	str	r3, [r4, #4]
 80024b2:	bf04      	itt	eq
 80024b4:	1949      	addeq	r1, r1, r5
 80024b6:	6021      	streq	r1, [r4, #0]
 80024b8:	6054      	str	r4, [r2, #4]
 80024ba:	e7ca      	b.n	8002452 <_free_r+0x26>
 80024bc:	b003      	add	sp, #12
 80024be:	bd30      	pop	{r4, r5, pc}
 80024c0:	200000a0 	.word	0x200000a0

080024c4 <_read_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4d07      	ldr	r5, [pc, #28]	; (80024e4 <_read_r+0x20>)
 80024c8:	4604      	mov	r4, r0
 80024ca:	4608      	mov	r0, r1
 80024cc:	4611      	mov	r1, r2
 80024ce:	2200      	movs	r2, #0
 80024d0:	602a      	str	r2, [r5, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7fe f990 	bl	80007f8 <_read>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d102      	bne.n	80024e2 <_read_r+0x1e>
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	b103      	cbz	r3, 80024e2 <_read_r+0x1e>
 80024e0:	6023      	str	r3, [r4, #0]
 80024e2:	bd38      	pop	{r3, r4, r5, pc}
 80024e4:	200000a8 	.word	0x200000a8

080024e8 <_fstat_r>:
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	4d07      	ldr	r5, [pc, #28]	; (8002508 <_fstat_r+0x20>)
 80024ec:	2300      	movs	r3, #0
 80024ee:	4604      	mov	r4, r0
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	602b      	str	r3, [r5, #0]
 80024f6:	f7fe f9a8 	bl	800084a <_fstat>
 80024fa:	1c43      	adds	r3, r0, #1
 80024fc:	d102      	bne.n	8002504 <_fstat_r+0x1c>
 80024fe:	682b      	ldr	r3, [r5, #0]
 8002500:	b103      	cbz	r3, 8002504 <_fstat_r+0x1c>
 8002502:	6023      	str	r3, [r4, #0]
 8002504:	bd38      	pop	{r3, r4, r5, pc}
 8002506:	bf00      	nop
 8002508:	200000a8 	.word	0x200000a8

0800250c <_isatty_r>:
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	4d06      	ldr	r5, [pc, #24]	; (8002528 <_isatty_r+0x1c>)
 8002510:	2300      	movs	r3, #0
 8002512:	4604      	mov	r4, r0
 8002514:	4608      	mov	r0, r1
 8002516:	602b      	str	r3, [r5, #0]
 8002518:	f7fe f9a7 	bl	800086a <_isatty>
 800251c:	1c43      	adds	r3, r0, #1
 800251e:	d102      	bne.n	8002526 <_isatty_r+0x1a>
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	b103      	cbz	r3, 8002526 <_isatty_r+0x1a>
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	bd38      	pop	{r3, r4, r5, pc}
 8002528:	200000a8 	.word	0x200000a8

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
